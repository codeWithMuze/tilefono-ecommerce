<%- include("../../views/partials/admin/header") %>
<% 
// Helper function to format currency
function formatCurrency(amount) {
    return (amount || 0).toLocaleString('en-IN');
}

// Helper function to generate a consistent color for avatars based on customer name
function getRandomColor(name) {
    const colors = [
        '#1abc9c', '#2ecc71', '#3498db', '#9b59b6', '#34495e',
        '#16a085', '#27ae60', '#2980b9', '#8e44ad', '#2c3e50',
        '#f1c40f', '#e67e22', '#e74c3c', '#95a5a6', '#f39c12',
        '#d35400', '#c0392b', '#7f8c8d'
    ];
    
    // Generate a hash code from the name
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    
    // Use the hash to select a color
    const index = Math.abs(hash) % colors.length;
    return colors[index];
}
%>

<style>
    /* Customer Avatar Styles */
    .customer-avatar {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 14px;
    }
    
    .customer-info {
        display: flex;
        flex-direction: column;
    }
    
    /* Order Details Styles */
    .order-details-container {
        padding: 20px;
        background-color: var(--bg-secondary);
        border-radius: 5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid var(--border-color);
    }
    
    .order-summary {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 20px;
    }
    
    .summary-section {
        flex: 1;
        min-width: 300px;
        background-color: white;
        padding: 15px;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .summary-section h4 {
        margin-top: 0;
        margin-bottom: 15px;
        color: var(--text-primary);
        font-size: 16px;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 8px;
    }
    
    .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
    }
    
    .summary-item {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }
    
    .summary-item .label {
        font-size: 12px;
        color: var(--text-secondary);
        margin-bottom: 4px;
    }
    
    .summary-item .value {
        font-size: 14px;
        font-weight: 500;
        color: var(--text-primary);
    }
    
    .status-delivered {
        color: #27ae60;
        font-weight: 500;
    }
    
    .address-details {
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 4px;
    }
    
    .address-line {
        margin: 5px 0;
        font-size: 14px;
        line-height: 1.4;
    }
    
    .order-items-section {
        margin-top: 20px;
        border-top: 1px solid var(--border-color);
        padding-top: 20px;
    }
    
    .product-table {
        width: 100%;
        border-collapse: collapse;
        color: var(--text-primary);
    }
    
    .product-table thead th {
        background-color: var(--table-header);
        padding: 10px;
        text-align: left;
        font-size: 14px;
        font-weight: 600;
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
    }
    
    .product-table tbody td {
        padding: 12px 15px;
        border-bottom: 1px solid var(--border-color);
        vertical-align: middle;
    }
    
    .product-cell {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .product-image {
        width: 60px;
        height: 60px;
        border-radius: 4px;
        overflow: hidden;
        border: 1px solid var(--border-color);
    }
    
    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .product-info h5 {
        margin: 0 0 5px 0;
        font-size: 14px;
        color: var(--text-primary);
    }
    
    .product-brand {
        font-size: 12px;
        color: var(--text-secondary);
        margin: 0;
    }
    
    .text-center {
        text-align: center;
    }
    
    .text-right {
        text-align: right;
    }
    
    .subtotal-row td, .discount-row td, .total-row td {
        padding: 8px 10px;
    }
    
    .subtotal-row, .discount-row, .total-row {
        background-color: var(--bg-primary);
    }
    
    .discount-row td {
        color: var(--card-bg-red);
        background-color: var(--bg-primary);
    }
    
    .total-row td {
        font-weight: bold;
        border-top: 2px solid var(--border-color);
        font-size: 15px;
    }
    
    /* Make product toggle button more prominent */
    .products-btn {
        display: inline-block;
        padding: 6px 12px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    
    .products-btn:hover {
        background-color: #2980b9;
    }
</style>


<!-- Sales Summary Stats Grid -->
<div class="stats-grid">
    <div class="stat-card purple">
        <div class="stat-icon">üí∞</div>
        <div class="stat-info">
            <h3>Gross Sales</h3>
            <div class="value">‚Çπ<span id="gross-sales"><%= formatCurrency(grossSales) %></span></div>
        </div>
    </div>
    <!-- <div class="stat-card red">
        <div class="stat-icon">‚Ü©Ô∏è</div>
        <div class="stat-info">
            <h3>Returns/Cancelled</h3>
            <div class="value">‚Çπ<span id="returns"><%= formatCurrency(returnsAndCancellations) %></span></div>
        </div>
    </div> -->
    <div class="stat-card orange">
        <div class="stat-icon">üéüÔ∏è</div>
        <div class="stat-info">
            <h3>Coupons Redeemed</h3>
            <div class="value"><span id="coupons-count"><%= couponsRedeemed || 0 %></span></div>
        </div>
    </div>
    <div class="stat-card blue">
        <div class="stat-icon">üíµ</div>
        <div class="stat-info">
            <h3>Net Sales</h3>
            <div class="value">‚Çπ<span id="net-sales"><%= formatCurrency(netSales) %></span></div>
        </div>
    </div>
    <div class="stat-card" style="background-color: #21a558; color: white;">
        <div class="stat-icon">üì¶</div>
        <div class="stat-info">
            <h3>Product Sale</h3>
            <div class="value"><span id="total-orders"><%= totalOrders %></span></div>
        </div>
    </div>
</div>

<!-- Sales Report Section -->
<div class="product-section">
    <div class="section-header">
        <h2 class="section-title">Sales Report</h2>
        <div class="date-filter">
            <button id="filter-daily" class="download-btn <%= filter.type === 'daily' ? 'active' : '' %>">Daily</button>
            <button id="filter-weekly" class="download-btn <%= filter.type === 'weekly' ? 'active' : '' %>">Weekly</button>
            <button id="filter-monthly" class="download-btn <%= filter.type === 'monthly' ? 'active' : '' %>">Monthly</button>
            <button id="filter-yearly" class="download-btn <%= filter.type === 'yearly' ? 'active' : '' %>">Yearly</button>
            <button id="filter-custom" class="download-btn <%= filter.type === 'custom' ? 'active' : '' %>">Custom</button>
            <div id="custom-date-range" class="<%= filter.type === 'custom' ? 'custom-date-visible' : 'custom-date-hidden' %>">
                <input type="date" id="start-date" class="date-input" value="<%= filter.startDate %>">
                <input type="date" id="end-date" class="date-input" value="<%= filter.endDate %>">
                <button id="apply-custom" class="download-btn">Apply</button>
            </div>
            <div class="export-dropdown" style="position: relative; display: inline-block; margin-left: 10px;">
                <button type="button" id="export-btn" class="download-btn">
                    <span class="icon">üì•</span>
                    Export
                </button>
                <div id="export-dropdown-content" style="display: none; position: absolute; right: 0; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1;">
                    <a href="javascript:void(0);" id="export-excel" style="color: #2c3e50; padding: 12px 16px; text-decoration: none; display: block;">Excel Sheet</a>
                    <a href="javascript:void(0);" id="export-pdf" style="color: #2c3e50; padding: 12px 16px; text-decoration: none; display: block;">PDF Document</a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="table-responsive">
        <table>
            <thead>
                <tr>
                    <th>Customer</th>
                    <th>Date</th>
                    <th>Coupon Applied</th>
                    <th>Offer Applied</th>
                    <th>Amount</th>
                    <th>Payment</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="sales-table-body">
                <% if (orders && orders.length > 0) { %>
                    <% orders.forEach((order, index) => { %>
                        <tr>
                            <td>
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <div class="customer-avatar" style="background-color: <%= getRandomColor(order.customerName) %>;">
                                        <%= order.customerInitials %>
                                    </div>
                                    <div class="customer-info">
                                        <div class="customer-name"><%= order.customerName %></div>
                                        <% if (order.customerEmail) { %>
                                        <div class="customer-email" style="font-size: 12px; color: #6c757d;"><%= order.customerEmail %></div>
                                        <% } %>
                                    </div>
                                </div>
                            </td>
                            <td><%= new Date(order.invoiceDate || order.createdOn).toLocaleDateString('en-US', {day: 'numeric', month: 'short', year: 'numeric'}) %></td>
                            <td class="text-center">
                                <% console.log(`Order ${order.orderId}: coupenApplied=${order.coupenApplied}, couponDiscount=${order.couponDiscount}`); %>
                                <% if (order.coupenApplied) { %>
                                    <span class="badge" style=" color: #27ae60; padding: 3px 6px; border-radius: 4px;">True</span>
                                <% } else { %>
                                    <span class="badge" style=" color: #e74c3c; padding: 3px 6px; border-radius: 4px;">False</span>
                                <% } %>
                            </td>
                            <td class="text-center">
                                <% if (order.offerDiscount > 0) { %>
                                    <span class="badge" style="color: #27ae60; padding: 3px 6px; border-radius: 4px;">True</span>
                                <% } else { %>
                                    <span class="badge" style="color: #e74c3c;  padding: 3px 6px; border-radius: 4px;">False</span>
                                <% } %>
                            </td>
                            <td>‚Çπ<%= order.finalAmount.toLocaleString() %></td>
                            <td><%= order.paymentMethod || 'Cash on Delivery' %></td>
                            <td><span class="status delivered" style="
                                padding: 4px 8px;
                                border-radius: 12px;
                                font-size: 12px;
                                font-weight: 500;
                                background-color: rgba(39, 174, 96, 0.1);
                                color: #27ae60;
                            ">Delivered</span></td>
                            <td>
                                <div style="display: flex; gap: 8px;">
                                    <button class="products-btn" data-order-id="<%= order._id %>">üì¶</button>
                                </div>
                            </td>
                        </tr>
                        <!-- Order details row (hidden by default) -->
                        <tr class="products-row" id="products-<%= order._id %>" style="display: none;">
                            <td colspan="8">
                                <div class="order-details-container">
                                    <!-- Order Summary Section -->
                                    <div class="order-summary">
                                        <div class="summary-section">
                                            <h4>Order Details</h4>
                                            <div class="summary-grid">
                                                <div class="summary-item">
                                                    <div class="label">Order ID:</div>
                                                    <div class="value"><%= order.orderId %></div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="label">Order Date:</div>
                                                    <div class="value"><%= new Date(order.invoiceDate || order.createdOn).toLocaleDateString('en-US', {year: 'numeric', month: 'long', day: 'numeric'}) %></div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="label">Order Status:</div>
                                                    <div class="value status-delivered">Delivered</div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="label">Payment Method:</div>
                                                    <div class="value"><%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : order.paymentMethod === 'razorpay' ? 'Online Payment' : 'Wallet' %></div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="label">Payment Status:</div>
                                                    <div class="value"><%= order.paymentStatus || (order.paymentMethod === 'cod' ? 'Pending' : 'Paid') %></div>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Shipping Address -->
                                        <div class="summary-section">
                                            <h4>Shipping Address</h4>
                                            <div class="address-details">
                                                <% 
                                                let addressName = "";
                                                let addressLine = "";
                                                let city = "";
                                                let state = "";
                                                let pincode = "";
                                                let phone = "";
                                                
                                                if (order.address && typeof order.address === 'object') {
                                                    addressName = order.address.name || '';
                                                    addressLine = order.address.addressLine || order.address.address || '';
                                                    city = order.address.city || '';
                                                    state = order.address.state || '';
                                                    pincode = order.address.pincode || '';
                                                    phone = order.address.phone || order.address.mobile || '';
                                                }
                                                %>
                                                <p class="address-line"><strong><%= addressName %></strong></p>
                                                <p class="address-line"><%= addressLine %></p>
                                                <p class="address-line"><%= city %> <%= state %> <%= pincode %></p>
                                                <p class="address-line">Phone: <%= phone %></p>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Products Section -->
                                    <div class="order-items-section">
                                        <h4>Products in Order</h4>
                                        <div class="order-items-table">
                                            <table class="product-table">
                                                <thead>
                                                    <tr>
                                                        <th>Product</th>
                                                        <th>Quantity</th>
                                                        <th>Price</th>
                                                        <th>Coupon Applied</th>
                                                        <th>Offer Applied</th>
                                                        <th>Total</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                                                        <% order.orderedItems.forEach(item => { %>
                                                            <tr>
                                                                <td>
                                                                    <div class="product-cell">
                                                                        <div class="product-image">
                                                                            <img src="<%= item.product.images && item.product.images.length > 0 ? `/images/products/${item.product.images[0]}` : '/img/product/product-1.jpg' %>" 
                                                                                 alt="<%= item.product.name %>" 
                                                                                 onerror="this.src='/img/product/product-1.jpg'">
                                                                        </div>
                                                                        <div class="product-info">
                                                                            <h5><%= item.product.name %></h5>
                                                                            <p class="product-brand"><%= item.product.brand %></p>
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td class="text-center"><%= item.quantity %></td>
                                                                <td class="text-right">‚Çπ<%= formatCurrency(item.price) %></td>
                                                                <td class="text-center">
                                                                    <% if (order.coupenApplied) { %>
                                                                        <span class="badge" style="background-color: #27ae60; color: white; padding: 3px 6px; border-radius: 4px;">True</span>
                                                                    <% } else { %>
                                                                        <span class="badge" style="background-color: #e74c3c; color: white; padding: 3px 6px; border-radius: 4px;">False</span>
                                                                    <% } %>
                                                                </td>
                                                                <td class="text-center">
                                                                    <% if (order.offerDiscount > 0) { %>
                                                                        <span class="badge" style="background-color: #27ae60; color: white; padding: 3px 6px; border-radius: 4px;">True</span>
                                                                    <% } else { %>
                                                                        <span class="badge" style="background-color: #e74c3c; color: white; padding: 3px 6px; border-radius: 4px;">False</span>
                                                                    <% } %>
                                                                </td>
                                                                <td class="text-right total-cell">‚Çπ<%= formatCurrency(item.price * item.quantity) %></td>
                                                            </tr>
                                                        <% }); %>
                                                        <!-- Subtotal row -->
                                                        <tr class="subtotal-row">
                                                            <td colspan="5" class="text-right">Subtotal:</td>
                                                            <td class="text-right">‚Çπ<%= formatCurrency(order.totalPrice || 0) %></td>
                                                        </tr>
                                                        <% if (order.couponDiscount > 0) { %>
                                                        <tr class="discount-row">
                                                            <td colspan="5" class="text-right">Coupon Discount:</td>
                                                            <td class="text-right">-‚Çπ<%= formatCurrency(order.couponDiscount) %></td>
                                                        </tr>
                                                        <% } %>
                                                        <% if (order.offerDiscount > 0) { %>
                                                        <tr class="discount-row">
                                                            <td colspan="5" class="text-right">Offer Discount:</td>
                                                            <td class="text-right">-‚Çπ<%= formatCurrency(order.offerDiscount) %></td>
                                                        </tr>
                                                        <% } %>
                                                        <tr class="total-row">
                                                            <td colspan="5" class="text-right"><strong>Total Amount:</strong></td>
                                                            <td class="text-right"><strong>‚Çπ<%= formatCurrency(order.finalAmount) %></strong></td>
                                                        </tr>
                                                    <% } else { %>
                                                        <tr>
                                                            <td colspan="6" class="text-center">No product details available</td>
                                                        </tr>
                                                    <% } %>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 20px;">No delivered orders found for the selected period</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
    
    <% if (pagination && pagination.totalPages > 1) { %>
    <div class="pagination">
        <% if (pagination.hasPrev) { %>
            <a href="/admin/sales?page=<%= pagination.currentPage - 1 %>&filter=<%= filter.type %>&startDate=<%= filter.startDate %>&endDate=<%= filter.endDate %>" class="pagination-button" aria-label="Previous page">¬´</a>
        <% } else { %>
            <span class="pagination-button disabled">¬´</span>
        <% } %>
        
        <% 
            let startPage = Math.max(1, pagination.currentPage - 2);
            let endPage = Math.min(pagination.totalPages, startPage + 4); 
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
        %>
        
        <% if (startPage > 1) { %>
            <a href="/admin/sales?page=1&filter=<%= filter.type %>&startDate=<%= filter.startDate %>&endDate=<%= filter.endDate %>" class="pagination-button">1</a>
            <% if (startPage > 2) { %>
                <span class="ellipsis">...</span>
            <% } %>
        <% } %>
        
        <% for (let i = startPage; i <= endPage; i++) { %>
            <% if (i === pagination.currentPage) { %>
                <span class="pagination-button active"><%= i %></span>
            <% } else { %>
                <a href="/admin/sales?page=<%= i %>&filter=<%= filter.type %>&startDate=<%= filter.startDate %>&endDate=<%= filter.endDate %>" class="pagination-button"><%= i %></a>
            <% } %>
        <% } %>
        
        <% if (endPage < pagination.totalPages) { %>
            <% if (endPage < pagination.totalPages - 1) { %>
                <span class="ellipsis">...</span>
            <% } %>
            <a href="/admin/sales?page=<%= pagination.totalPages %>&filter=<%= filter.type %>&startDate=<%= filter.startDate %>&endDate=<%= filter.endDate %>" class="pagination-button"><%= pagination.totalPages %></a>
        <% } %>
        
        <% if (pagination.hasNext) { %>
            <a href="/admin/sales?page=<%= pagination.currentPage + 1 %>&filter=<%= filter.type %>&startDate=<%= filter.startDate %>&endDate=<%= filter.endDate %>" class="pagination-button" aria-label="Next page">¬ª</a>
        <% } else { %>
            <span class="pagination-button disabled">¬ª</span>
        <% } %>
    </div>
    <% } %>
</div>

<!-- Add this CSS after including the header partial -->
<style>
    .date-filter {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .date-filter button {
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }
    
    .date-filter button.active {
        background-color: var(--accent-color);
        color: white;
    }
    
    .table-responsive {
        overflow-x: auto;
        margin-bottom: 20px;
    }
    
    .status {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .status.delivered {
        background-color: #2ecc71;
        color: white;
    }
    
    .status.processing {
        background-color: #3498db;
        color: white;
    }
    
    .status.shipped {
        background-color: #f39c12;
        color: white;
    }
    
    .status.cancelled {
        background-color: #e74c3c;
        color: white;
    }
    
    .status.returned {
        background-color: #9b59b6;
        color: white;
    }
    
    .view-btn {
        padding: 5px 10px;
        background-color: var(--sidebar-bg);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
    }
    
    .view-btn:hover {
        background-color: var(--sidebar-hover);
    }
    
    .custom-date-visible {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .custom-date-hidden {
        display: none;
    }
    
    @media (max-width: 768px) {
        .date-filter {
            flex-direction: row;
            flex-wrap: wrap;
        }
        
        .custom-date-visible {
            flex-direction: column;
            align-items: flex-start;
            width: 100%;
            margin-top: 10px;
        }
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 0;
        gap: 5px;
    }
    
    .pagination-button {
        padding: 8px 12px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        color: #333;
        text-decoration: none;
        border-radius: 4px;
    }
    
    .pagination-button.active {
        background-color: var(--accent-color);
        color: white;
        border-color: var(--accent-color);
    }
    
    .pagination-button.disabled {
        color: #ccc;
        cursor: not-allowed;
    }
    
    .ellipsis {
        padding: 8px 12px;
    }

    /* Product Table Styles */
    .order-items-table {
        margin-top: 10px;
        width: 100%;
        overflow-x: auto;
    }
    
    .product-table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        border-radius: 5px;
        overflow: hidden;
    }
    
    .product-table thead th {
        background-color: #f2f2f2;
        padding: 12px 15px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        color: #333;
        border-bottom: 1px solid #ddd;
    }
    
    .product-table tbody td {
        padding: 12px 15px;
        border-bottom: 1px solid #eee;
        font-size: 14px;
        vertical-align: middle;
    }
    
    .product-cell {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .product-image {
        width: 50px;
        height: 50px;
        border-radius: 4px;
        overflow: hidden;
        background-color: #f5f5f5;
        flex-shrink: 0;
    }
    
    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .product-info h5 {
        margin: 0 0 4px 0;
        font-size: 14px;
        font-weight: 500;
        color: #333;
    }
    
    .product-brand {
        color: #666;
        font-size: 12px;
        margin: 0;
    }
    
    .text-center {
        text-align: center;
    }
    
    .text-right {
        text-align: right;
    }
    
    .total-cell {
        font-weight: 500;
        color: #333;
    }
    
    .subtotal-row td, .discount-row td, .total-row td {
        padding: 10px 15px;
        border-bottom: none;
        background-color: #f9f9f9;
    }
    
    .subtotal-row td {
        border-top: 1px solid #ddd;
    }
    
    .discount-row td {
        color: #e74c3c;
    }
    
    .total-row td {
        font-weight: bold;
        border-top: 2px solid #ddd;
        font-size: 15px;
    }
    
    @media (max-width: 768px) {
        .product-cell {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }
        
        .product-image {
            width: 40px;
            height: 40px;
        }
    }
</style>

<!-- Order Details Modal (Hidden by default) -->
<div id="order-details-modal" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  align-items: center;
  justify-content: center;
">
  <div style="
    background-color: var(--card-bg);
    border-radius: 10px;
    padding: 20px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  ">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
      <h2 style="font-size: 1.5rem;">Order Details</h2>
      <button id="close-modal" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--text-primary);">√ó</button>
    </div>
    <div id="order-detail-content">
      <!-- This will be populated dynamically with JavaScript -->
    </div>
  </div>
</div>

<!-- <script>
    document.addEventListener('DOMContentLoaded', function() {
    // Modal handling for order details
    const modal = document.getElementById('order-details-modal');
    const closeModal = document.getElementById('close-modal');
    const orderDetailContent = document.getElementById('order-detail-content');
    
    closeModal.addEventListener('click', function() {
        modal.style.display = 'none';
    });
    
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    window.showOrderDetails = function(orderId) {
        // Show loading in modal
        orderDetailContent.innerHTML = '<div style="text-align: center; padding: 20px;">Loading order details...</div>';
        modal.style.display = 'flex';
        
        // Fetch order details from server
        fetch(`/admin/orders/${orderId}`)
            .then(response => response.json())
            .then(order => {
                console.log("Received order details:", order);
                
                // Format order details for display
                const orderDate = new Date(order.invoiceDate || order.createdOn).toLocaleDateString('en-US', {
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric'
                });
                
                // Generate customer name and info
                let customerName = "Customer";
                let customerEmail = "N/A";
                let customerPhone = "N/A";
                
                // Check for user object first
                if (order.user) {
                    customerName = order.user.name || "Customer";
                    customerEmail = order.user.email || "N/A";
                    customerPhone = order.user.phone || "N/A";
                } 
                // If not found in user object, try to find from address (if it's populated)
                else if (order.address && typeof order.address === 'object' && order.address.name) {
                    customerName = order.address.name || "Customer";
                    customerEmail = order.address.email || "N/A";
                    customerPhone = order.address.phone || order.address.mobile || "N/A";
                }
                
                // Generate shipping address HTML
                let shippingAddress = "";
                
                // Check for shippingInfo first
                if (order.shippingInfo && order.shippingInfo.name) {
                    shippingAddress = `
                        <p style="margin-bottom: 5px;"><strong>Name:</strong> ${order.shippingInfo.name || customerName}</p>
                        <p style="margin-bottom: 5px;"><strong>Address:</strong> ${order.shippingInfo.landmark || order.shippingInfo.address || ''}</p>
                        <p style="margin-bottom: 5px;">${order.shippingInfo.city || ''}, ${order.shippingInfo.state || ''} ${order.shippingInfo.pincode || ''}</p>
                        <p><strong>Phone:</strong> ${order.shippingInfo.phone || customerPhone}</p>
                    `;
                } 
                // Then check if address is an object with address fields
                else if (order.address && typeof order.address === 'object') {
                    // Handle different address schemas
                    if (order.address.addressLine || order.address.address) {
                        const addressLine = order.address.addressLine || order.address.address || '';
                        const city = order.address.city || '';
                        const state = order.address.state || '';
                        const pincode = order.address.pincode || order.address.zipCode || '';
                        const phone = order.address.phone || order.address.mobile || customerPhone;
                        
                        shippingAddress = `
                            <p style="margin-bottom: 5px;"><strong>Name:</strong> ${order.address.name || customerName}</p>
                            <p style="margin-bottom: 5px;"><strong>Address:</strong> ${addressLine}</p>
                            <p style="margin-bottom: 5px;">${city}${city && state ? ', ' : ''}${state} ${pincode}</p>
                            <p><strong>Phone:</strong> ${phone}</p>
                        `;
                    } 
                    // If address object has a different structure
                    else if (order.address.name || order.address.email) {
                        shippingAddress = `
                            <p style="margin-bottom: 5px;"><strong>Name:</strong> ${order.address.name || customerName}</p>
                            <p style="margin-bottom: 5px;"><strong>Email:</strong> ${order.address.email || customerEmail}</p>
                            <p><strong>Phone:</strong> ${order.address.phone || "N/A"}</p>
                            <p><strong>Address:</strong> Address details not available</p>
                        `;
                    }
                } 
                // Finally, if address is a string ID or other format
                else {
                    shippingAddress = `
                        <p style="margin-bottom: 5px;"><strong>Name:</strong> ${customerName}</p>
                        <p style="margin-bottom: 5px;"><strong>Email:</strong> ${customerEmail}</p>
                        <p><strong>Phone:</strong> ${customerPhone}</p>
                        <p><em>Detailed address information not available. Please check user profile.</em></p>
                    `;
                }
                
                // Generate order item rows
                let orderItems = '';
                let subtotal = 0;
                
                if (order.orderedItems && order.orderedItems.length > 0) {
                    order.orderedItems.forEach(item => {
                        const productName = item.product ? 
                            (item.product.productName || item.product.name || 'Product') : 'Product';
                        const price = item.price || 0;
                        const quantity = item.quantity || 1;
                        const total = price * quantity;
                        subtotal += total;
                        
                        const productImage = item.product && item.product.productImage && 
                            item.product.productImage.length > 0 ?
                            `/product-images/${item.product.productImage[0]}` :
                            '/img/product/product-1.jpg';
                        
                        orderItems += `
                            <tr>
                                <td style="padding: 10px 5px;">
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <div style="width: 50px; height: 50px; background-color: #f1f1f1; border-radius: 4px; overflow: hidden;">
                                            <img src="${productImage}" style="width: 100%; height: 100%; object-fit: cover;" 
                                                alt="${productName}" onerror="this.src='/img/product/product-1.jpg'">
                                        </div>
                                        <span>${productName}</span>
                                    </div>
                                </td>
                                <td style="text-align: center;">${quantity}</td>
                                <td style="text-align: right;">‚Çπ${price.toLocaleString()}</td>
                                <td style="text-align: right;">‚Çπ${total.toLocaleString()}</td>
                            </tr>
                        `;
                    });
                } else {
                    orderItems = `
                        <tr>
                            <td colspan="4" style="text-align: center; padding: 15px;">No items in this order</td>
                        </tr>
                    `;
                }
                
                // Calculate shipping and discounts
                const couponDiscount = order.couponDiscount || 0;
                const offerDiscount = order.offerDiscount || order.productDiscount || 0;
                const shipping = (order.shippingFee || 0);
                
                // Generate full order detail HTML
                orderDetailContent.innerHTML = `
                    <div style="background-color: var(--bg-primary); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <h3 style="font-size: 1.3rem; margin-bottom: 5px;">${order.orderId}</h3>
                                <p style="color: var(--text-secondary); margin-bottom: 5px;">Placed on ${orderDate}</p>
                            </div>
                            <span style="
                                padding: 6px 12px;
                                border-radius: 12px;
                                font-size: 14px;
                                font-weight: 500;
                                background-color: rgba(39, 174, 96, 0.1);
                                color: #27ae60;
                                ">
                                ${order.status}
                            </span>
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div>
                            <h4 style="font-size: 1rem; margin-bottom: 10px;">Customer Information</h4>
                            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                <div style="width: 40px; height: 40px; border-radius: 50%; background-color: var(--accent-color); color: white; display: flex; align-items: center; justify-content: center; font-weight: 500;">
                                    ${customerName.split(' ').map(n => n[0]).join('').toUpperCase()}
                                </div>
                                <div>
                                    <div style="font-weight: 500;">${customerName}</div>
                                    <div style="font-size: 0.9rem; color: var(--text-secondary);">${customerEmail}</div>
                                </div>
                            </div>
                            <p style="margin-bottom: 5px;"><strong>Phone:</strong> ${customerPhone}</p>
                            <p style="margin-bottom: 5px;"><strong>Payment Method:</strong> ${order.paymentMethod || 'Cash on Delivery'}</p>
                        </div>
                        
                        <div>
                            <h4 style="font-size: 1rem; margin-bottom: 10px;">Shipping Address</h4>
                            ${shippingAddress}
                        </div>
                    </div>
                    
                    <h4 style="font-size: 1rem; margin-bottom: 10px;">Order Items</h4>
                    <div style="background-color: var(--bg-primary); border-radius: 8px; overflow: hidden; margin-bottom: 20px;">
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background-color: var(--bg-secondary);">
                                    <th style="padding: 10px; text-align: left;">Product</th>
                                    <th style="padding: 10px; text-align: center;">Quantity</th>
                                    <th style="padding: 10px; text-align: right;">Price</th>
                                    <th style="padding: 10px; text-align: right;">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${orderItems}
                            </tbody>
                            <tfoot>
                                <tr style="border-top: 1px solid var(--border-color);">
                                    <td colspan="3" style="padding: 10px; text-align: right;">Subtotal:</td>
                                    <td style="padding: 10px; text-align: right;">‚Çπ${subtotal.toLocaleString()}</td>
                                </tr>
                                ${couponDiscount > 0 ? `
                                <tr>
                                    <td colspan="3" style="padding: 10px; text-align: right;">Coupon Discount:</td>
                                    <td style="padding: 10px; text-align: right; color: #e74c3c;">-‚Çπ${couponDiscount.toLocaleString()}</td>
                                </tr>
                                ` : ''}
                                ${offerDiscount > 0 ? `
                                <tr>
                                    <td colspan="3" style="padding: 10px; text-align: right;">Offer Discount:</td>
                                    <td style="padding: 10px; text-align: right; color: #e74c3c;">-‚Çπ${offerDiscount.toLocaleString()}</td>
                                </tr>
                                ` : ''}
                                ${shipping > 0 ? `
                                <tr>
                                    <td colspan="3" style="padding: 10px; text-align: right;">Shipping:</td>
                                    <td style="padding: 10px; text-align: right;">‚Çπ${shipping.toLocaleString()}</td>
                                </tr>
                                ` : ''}
                                <tr style="font-weight: 700;">
                                    <td colspan="3" style="padding: 10px; text-align: right; border-top: 2px solid var(--border-color);">Total:</td>
                                    <td style="padding: 10px; text-align: right; border-top: 2px solid var(--border-color);">‚Çπ${order.finalAmount.toLocaleString()}</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                `;
            })
            .catch(error => {
                console.error('Error fetching order details:', error);
                orderDetailContent.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #e74c3c;">
                        <p>Failed to load order details. Please try again later.</p>
                    </div>
                `;
            });
    };

    // Date filter functionality
    const filterButtons = document.querySelectorAll('.date-filter button:not(#export-report):not(#apply-custom):not(#export-btn)');
    const customDateRange = document.getElementById('custom-date-range');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const applyCustomBtn = document.getElementById('apply-custom');
    const exportReportBtn = document.getElementById('export-report');
    
    // Handle filter button clicks
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const filterType = this.id.replace('filter-', '');
            
            // Show/hide custom date inputs only for custom filter
            if (filterType === 'custom') {
                customDateRange.className = 'custom-date-visible';
            } else {
                customDateRange.className = 'custom-date-hidden';
                // Navigate to the filtered view
                window.location.href = `/admin/sales?filter=${filterType}`;
            }
        });
    });
    
    // Handle custom date range application
    applyCustomBtn.addEventListener('click', function() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;
        
        if (!startDate || !endDate) {
            alert('Please select both start and end dates');
            return;
        }
        
        window.location.href = `/admin/sales?filter=custom&startDate=${startDate}&endDate=${endDate}`;
    });
    
    // Export functionality with dropdown
    const exportBtn = document.getElementById('export-btn');
    const exportDropdown = document.getElementById('export-dropdown-content');
    const exportExcel = document.getElementById('export-excel');
    const exportPdf = document.getElementById('export-pdf');
    
    // Toggle dropdown when clicking export button
    exportBtn.addEventListener('click', function(e) {
        e.preventDefault();
        exportDropdown.style.display = exportDropdown.style.display === 'block' ? 'none' : 'block';
    });
    
    // Close dropdown when clicking elsewhere
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.export-dropdown')) {
            exportDropdown.style.display = 'none';
        }
    });
    
    // Handle Excel export
    exportExcel.addEventListener('click', function(e) {
        e.preventDefault();
        exportDropdown.style.display = 'none';
        exportReport('excel');
    });
    
    // Handle PDF export
    exportPdf.addEventListener('click', function(e) {
        e.preventDefault();
        exportDropdown.style.display = 'none';
        exportReport('pdf');
    });
    
    // Export report function
    function exportReport(format) {
        // Get current filter parameters from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const filter = urlParams.get('filter') || 'monthly';
        const startDate = urlParams.get('startDate') || '';
        const endDate = urlParams.get('endDate') || '';
        
        // Construct the export URL with format and filters
        let exportUrl = `/admin/export-sales?format=${format}&filter=${filter}`;
        if (startDate) exportUrl += `&startDate=${startDate}`;
        if (endDate) exportUrl += `&endDate=${endDate}`;
        
        // Initiate download
        window.location.href = exportUrl;
    }
    
    // View order details
    document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            window.location.href = `/admin/orders/${orderId}`;
        });
    });
    
    // Products toggle functionality
    document.querySelectorAll('.products-btn').forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const productsRow = document.getElementById(`products-${orderId}`);
            
            if (productsRow.style.display === 'none' || !productsRow.style.display) {
                // Hide all other product rows first
                document.querySelectorAll('.products-row').forEach(row => {
                    row.style.display = 'none';
                });
                // Show this product row
                productsRow.style.display = 'table-row';
                this.textContent = 'üîΩ Hide Details';
                this.style.backgroundColor = '#e74c3c'; // Change to red when active
                
                // Reset text of other buttons
                document.querySelectorAll('.products-btn').forEach(btn => {
                    if (btn !== this) {
                        btn.textContent = 'üì¶ View Details';
                        btn.style.backgroundColor = '#3498db'; // Reset to default blue
                    }
                });
            } else {
                productsRow.style.display = 'none';
                this.textContent = 'üì¶ View Details';
                this.style.backgroundColor = '#3498db';
            }
        });
    });
    
    // Initialize buttons with correct text
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.products-btn').forEach(btn => {
            btn.textContent = 'üì¶ View Details';
        });
    });
    });

    document.addEventListener('DOMContentLoaded', function() {
    // Date filter functionality
    const filterDailyBtn = document.getElementById('filter-daily');
    const filterWeeklyBtn = document.getElementById('filter-weekly');
    const filterMonthlyBtn = document.getElementById('filter-monthly');
    const filterYearlyBtn = document.getElementById('filter-yearly');
    const filterCustomBtn = document.getElementById('filter-custom');
    const customDateRange = document.getElementById('custom-date-range');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const applyCustomBtn = document.getElementById('apply-custom');
    
    // Ensure all elements exist
    if (filterDailyBtn && filterWeeklyBtn && filterMonthlyBtn && filterYearlyBtn && filterCustomBtn) {
        // Handle filter button clicks - individual event listeners for better control
        filterDailyBtn.addEventListener('click', function() {
            window.location.href = '/admin/sales?filter=daily';
        });
        
        filterWeeklyBtn.addEventListener('click', function() {
            window.location.href = '/admin/sales?filter=weekly';
        });
        
        filterMonthlyBtn.addEventListener('click', function() {
            window.location.href = '/admin/sales?filter=monthly';
        });
        
        filterYearlyBtn.addEventListener('click', function() {
            window.location.href = '/admin/sales?filter=yearly';
        });
        
        filterCustomBtn.addEventListener('click', function() {
            // Show custom date inputs
            if (customDateRange) {
                customDateRange.className = 'custom-date-visible';
            }
        });
    }
    
    // Handle custom date range application
    if (applyCustomBtn) {
        applyCustomBtn.addEventListener('click', function() {
            if (!startDateInput || !endDateInput) return;
            
            const startDate = startDateInput.value;
            const endDate = endDateInput.value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            window.location.href = `/admin/sales?filter=custom&startDate=${startDate}&endDate=${endDate}`;
        });
    }
    
    // Export functionality with dropdown
    const exportBtn = document.getElementById('export-btn');
    const exportDropdown = document.getElementById('export-dropdown-content');
    const exportExcel = document.getElementById('export-excel');
    const exportPdf = document.getElementById('export-pdf');
    
    // Toggle dropdown when clicking export button
    if (exportBtn && exportDropdown) {
        exportBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation(); // Prevent document click from closing right away
            exportDropdown.style.display = exportDropdown.style.display === 'block' ? 'none' : 'block';
        });
    }
    
    // Close dropdown when clicking elsewhere
    document.addEventListener('click', function(e) {
        if (exportDropdown && !e.target.closest('.export-dropdown')) {
            exportDropdown.style.display = 'none';
        }
    });
    
    // Handle Excel export
    if (exportExcel) {
        exportExcel.addEventListener('click', function(e) {
            e.preventDefault();
            if (exportDropdown) exportDropdown.style.display = 'none';
            exportReport('excel');
        });
    }
    
    // Handle PDF export
    if (exportPdf) {
        exportPdf.addEventListener('click', function(e) {
            e.preventDefault();
            if (exportDropdown) exportDropdown.style.display = 'none';
            exportReport('pdf');
        });
    }
    
    // Export report function
    function exportReport(format) {
        // Get current filter parameters from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const filter = urlParams.get('filter') || 'monthly';
        const startDate = urlParams.get('startDate') || '';
        const endDate = urlParams.get('endDate') || '';
        
        // Construct the export URL with format and filters
        let exportUrl = `/admin/export-sales?format=${format}&filter=${filter}`;
        if (startDate) exportUrl += `&startDate=${startDate}`;
        if (endDate) exportUrl += `&endDate=${endDate}`;
        
        // Initiate download
        window.location.href = exportUrl;
    }
    
    // Products toggle functionality
    const productButtons = document.querySelectorAll('.products-btn');
    
    if (productButtons.length > 0) {
        productButtons.forEach(button => {
            // Set initial text
            button.textContent = 'üì¶';
            
            button.addEventListener('click', function() {
                const orderId = this.getAttribute('data-order-id');
                const productsRow = document.getElementById(`products-${orderId}`);
                
                if (!productsRow) return;
                
                if (productsRow.style.display === 'none' || !productsRow.style.display) {
                    // Hide all other product rows first
                    document.querySelectorAll('.products-row').forEach(row => {
                        row.style.display = 'none';
                    });
                    
                    // Show this product row
                    productsRow.style.display = 'table-row';
                    this.textContent = 'üîΩ';
                    this.style.backgroundColor = '#e74c3c'; // Change to red when active
                    
                    // Reset text of other buttons
                    productButtons.forEach(btn => {
                        if (btn !== this) {
                            btn.textContent = 'üì¶';
                            btn.style.backgroundColor = '#3498db'; // Reset to default blue
                        }
                    });
                } else {
                    productsRow.style.display = 'none';
                    this.textContent = 'üì¶';
                    this.style.backgroundColor = '#3498db';
                }
            });
        });
    }
});

document.addEventListener('DOMContentLoaded', function() {
        // Filter buttons
        const filterDaily = document.getElementById('filter-daily');
        const filterWeekly = document.getElementById('filter-weekly');
        const filterMonthly = document.getElementById('filter-monthly');
        const filterYearly = document.getElementById('filter-yearly');
        const filterCustom = document.getElementById('filter-custom');
        const customDateRange = document.getElementById('custom-date-range');
        const startDateInput = document.getElementById('start-date');
        const endDateInput = document.getElementById('end-date');
        const applyCustomBtn = document.getElementById('apply-custom');
        
        // Add event listeners for filter buttons
        filterDaily.addEventListener('click', function() {
            applyFilter('daily');
        });
        
        filterWeekly.addEventListener('click', function() {
            applyFilter('weekly');
        });
        
        filterMonthly.addEventListener('click', function() {
            applyFilter('monthly');
        });
        
        filterYearly.addEventListener('click', function() {
            applyFilter('yearly');
        });
        
        filterCustom.addEventListener('click', function() {
            // Show custom date range inputs
            customDateRange.classList.remove('custom-date-hidden');
            customDateRange.classList.add('custom-date-visible');
            
            // Update active button
            updateActiveFilterButton(filterCustom);
        });
        
        applyCustomBtn.addEventListener('click', function() {
            const startDate = startDateInput.value;
            const endDate = endDateInput.value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            if (new Date(startDate) > new Date(endDate)) {
                alert('Start date cannot be after end date');
                return;
            }
            
            applyFilter('custom', startDate, endDate);
        });
        
        // Function to apply filter
        function applyFilter(filterType, startDate = null, endDate = null) {
            // Create URL with filter parameters
            let url = '/admin/sales?filter=' + filterType;
            
            if (filterType === 'custom' && startDate && endDate) {
                url += '&startDate=' + startDate + '&endDate=' + endDate;
            }
            
            // Redirect to the filtered URL
            window.location.href = url;
        }
        
        // Function to update active filter button
        function updateActiveFilterButton(activeButton) {
            // Remove active class from all filter buttons
            [filterDaily, filterWeekly, filterMonthly, filterYearly, filterCustom].forEach(button => {
                button.classList.remove('active');
            });
            
            // Add active class to the clicked button
            activeButton.classList.add('active');
        }
        
        // Handle export functionality
        const exportBtn = document.getElementById('export-btn');
        const exportDropdown = document.getElementById('export-dropdown-content');
        const exportExcel = document.getElementById('export-excel');
        const exportPdf = document.getElementById('export-pdf');
        
        // Export dropdown toggle
        exportBtn.addEventListener('click', function() {
            exportDropdown.style.display = exportDropdown.style.display === 'none' ? 'block' : 'none';
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.matches('#export-btn') && !event.target.closest('#export-dropdown-content')) {
                exportDropdown.style.display = 'none';
            }
        });
        
        // Export handlers
        exportExcel.addEventListener('click', function() {
            exportSalesReport('excel');
        });
        
        exportPdf.addEventListener('click', function() {
            exportSalesReport('pdf');
        });
        
        // Function to export sales report
        function exportSalesReport(format) {
            // Get current filter parameters from URL
            const urlParams = new URLSearchParams(window.location.search);
            const filterType = urlParams.get('filter') || 'daily';
            const startDate = urlParams.get('startDate') || '';
            const endDate = urlParams.get('endDate') || '';
            
            // Create export URL
            let exportUrl = '/admin/export-sales?format=' + format + '&filter=' + filterType;
            
            if (filterType === 'custom' && startDate && endDate) {
                exportUrl += '&startDate=' + startDate + '&endDate=' + endDate;
            }
            
            // Redirect to export URL
            window.location.href = exportUrl;
        }
        
        // Toggle product details
        const productButtons = document.querySelectorAll('.products-btn');
        productButtons.forEach(button => {
            button.addEventListener('click', function() {
                const orderId = this.getAttribute('data-order-id');
                const productsRow = document.getElementById('products-' + orderId);
                
                if (productsRow.style.display === 'none' || !productsRow.style.display) {
                    productsRow.style.display = 'table-row';
                    this.textContent = 'üîº';
                } else {
                    productsRow.style.display = 'none';
                    this.textContent = 'üì¶';
                }
            });
        });
    });
</script> -->

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Filter buttons
    const filterDaily = document.getElementById('filter-daily');
    const filterWeekly = document.getElementById('filter-weekly');
    const filterMonthly = document.getElementById('filter-monthly');
    const filterYearly = document.getElementById('filter-yearly');
    const filterCustom = document.getElementById('filter-custom');
    const customDateRange = document.getElementById('custom-date-range');
    const startDateInput = document.getElementById('start-date');
    const endDateInput = document.getElementById('end-date');
    const applyCustomBtn = document.getElementById('apply-custom');
    const exportBtn = document.getElementById('export-btn');
    const exportDropdown = document.getElementById('export-dropdown-content');
    const exportExcel = document.getElementById('export-excel');
    const exportPdf = document.getElementById('export-pdf');

    // Function to update active filter button
    function updateActiveFilterButton(activeButton) {
        [filterDaily, filterWeekly, filterMonthly, filterYearly, filterCustom].forEach(button => {
            if (button) button.classList.remove('active');
        });
        if (activeButton) activeButton.classList.add('active');
    }

    // Function to apply filter
    function applyFilter(filterType, startDate = null, endDate = null) {
        let url = `/admin/sales?filter=${filterType}`;
        if (filterType === 'custom' && startDate && endDate) {
            url += `&startDate=${startDate}&endDate=${endDate}`;
        }
        window.location.href = url;
    }

    // Initialize active filter button based on current URL
    const urlParams = new URLSearchParams(window.location.search);
    const currentFilter = urlParams.get('filter') || 'monthly';
    const filterButtons = {
        'daily': filterDaily,
        'weekly': filterWeekly,
        'monthly': filterMonthly,
        'yearly': filterYearly,
        'custom': filterCustom
    };
    updateActiveFilterButton(filterButtons[currentFilter]);
    if (currentFilter === 'custom') {
        customDateRange.classList.remove('custom-date-hidden');
        customDateRange.classList.add('custom-date-visible');
    }

    // Add event listeners for filter buttons
    if (filterDaily) {
        filterDaily.addEventListener('click', function() {
            updateActiveFilterButton(filterDaily);
            customDateRange.classList.remove('custom-date-visible');
            customDateRange.classList.add('custom-date-hidden');
            applyFilter('daily');
        });
    }
    if (filterWeekly) {
        filterWeekly.addEventListener('click', function() {
            updateActiveFilterButton(filterWeekly);
            customDateRange.classList.remove('custom-date-visible');
            customDateRange.classList.add('custom-date-hidden');
            applyFilter('weekly');
        });
    }
    if (filterMonthly) {
        filterMonthly.addEventListener('click', function() {
            updateActiveFilterButton(filterMonthly);
            customDateRange.classList.remove('custom-date-visible');
            customDateRange.classList.add('custom-date-hidden');
            applyFilter('monthly');
        });
    }
    if (filterYearly) {
        filterYearly.addEventListener('click', function() {
            updateActiveFilterButton(filterYearly);
            customDateRange.classList.remove('custom-date-visible');
            customDateRange.classList.add('custom-date-hidden');
            applyFilter('yearly');
        });
    }
    if (filterCustom) {
        filterCustom.addEventListener('click', function() {
            updateActiveFilterButton(filterCustom);
            customDateRange.classList.remove('custom-date-hidden');
            customDateRange.classList.add('custom-date-visible');
        });
    }

    // Handle custom date range application
    if (applyCustomBtn) {
        applyCustomBtn.addEventListener('click', function() {
            const startDate = startDateInput.value;
            const endDate = endDateInput.value;

            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            if (new Date(startDate) > new Date(endDate)) {
                alert('Start date cannot be after end date');
                return;
            }

            updateActiveFilterButton(filterCustom);
            applyFilter('custom', startDate, endDate);
        });
    }

    // Export functionality
    if (exportBtn && exportDropdown) {
        exportBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            exportDropdown.style.display = exportDropdown.style.display === 'block' ? 'none' : 'block';
        });
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (exportDropdown && !e.target.closest('.export-dropdown')) {
            exportDropdown.style.display = 'none';
        }
    });

    // Export handlers
    if (exportExcel) {
        exportExcel.addEventListener('click', function(e) {
            e.preventDefault();
            exportDropdown.style.display = 'none';
            exportSalesReport('excel');
        });
    }
    if (exportPdf) {
        exportPdf.addEventListener('click', function(e) {
            e.preventDefault();
            exportDropdown.style.display = 'none';
            exportSalesReport('pdf');
        });
    }

    // Function to export sales report
    function exportSalesReport(format) {
        const filterType = urlParams.get('filter') || 'monthly';
        const startDate = urlParams.get('startDate') || '';
        const endDate = urlParams.get('endDate') || '';
        let exportUrl = `/admin/export-sales?format=${format}&filter=${filterType}`;
        if (startDate) exportUrl += `&startDate=${startDate}`;
        if (endDate) exportUrl += `&endDate=${endDate}`;
        window.location.href = exportUrl;
    }

    // Products toggle functionality
    const productButtons = document.querySelectorAll('.products-btn');
    productButtons.forEach(button => {
        button.textContent = 'üì¶';
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const productsRow = document.getElementById(`products-${orderId}`);
            if (!productsRow) return;

            const isHidden = productsRow.style.display === 'none' || !productsRow.style.display;
            document.querySelectorAll('.products-row').forEach(row => row.style.display = 'none');
            document.querySelectorAll('.products-btn').forEach(btn => {
                btn.textContent = 'üì¶';
                btn.style.backgroundColor = '#3498db';
            });

            if (isHidden) {
                productsRow.style.display = 'table-row';
                this.textContent = 'üîΩ';
                this.style.backgroundColor = '#e74c3c';
            } else {
                productsRow.style.display = 'none';
                this.textContent = 'üì¶';
                this.style.backgroundColor = '#3498db';
            }
        });
    });
});
</script>
<%- include("../../views/partials/admin/footer") %>
