<%- include("../../views/partials/user/header") %>

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>User Profile</title>
        <link href="https://fonts.googleapis.com/css2?family=Unbounded:wght@500&family=Poppins:wght@400;600&display=swap" rel="stylesheet">
        <!-- SweetAlert2 CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
        <!-- Font Awesome CDN -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: 'Poppins', sans-serif;
            }

            body {
                background-color: #f8fafc;
                color: #1a1a1a;
                overflow-x: hidden;
            }

            .container-aside {
                display: flex;
                min-height: 100vh;

            }

            .sidebar {
                width: 300px;
                background: linear-gradient(90deg, #080809 0%, #262729 100%);
                color: white;
                padding: 30px 20px;
                position: absolute;
                height: 100%; /* Adjust height dynamically based on header height */
                top: 150px;
                left: 0;
                transition: transform 0.3s ease;
                z-index: 0;
            }

            .user-info {
                text-align: center;
                padding-bottom: 20px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                position: relative;
            }

            .avatar {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                background-color: #636566;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 auto 15px;
                color: white;
                font-size: 24px;
                font-weight: bold;
                overflow: hidden;
            }

            .avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .change-profile-pic {
                position: absolute;
                bottom: 10px;
                right: 10px;
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                border-radius: 50%;
                width: 25px;
                height: 25px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 12px;
                transition: all 0.3s;
            }

        

            .user-info h3 {
                font-family: 'Unbounded', monospace;
                font-size: 1.2rem;
                margin-bottom: 5px;
            }

            .user-info p {
                font-size: 14px;
                color: #e2e8f0;
            }

            .menu {
                list-style: none;
                margin-top: 30px;
            }

            .menu li {
                padding: 12px 20px;
                cursor: pointer;
                border-radius: 8px;
                transition: all 0.3s;
                font-size: 16px;
                display: flex;
                align-items: center;
            }


            .menu li i {
                margin-right: 10px;
                width: 20px;
                text-align: center;
                font-size: 16px;
            }

            .menu li a {
                color: white;
                text-decoration: none;
                width: 100%;
                display: block;
            }

            .content {
                flex: 1;
                margin-left: 310px;
                padding: 20px;
                max-width: 1200px;
                transition: margin-left 0.3s ease, transform 0.3s ease;
            }

            .section {
                display: none;
                animation: fadeIn 0.5s ease;
            }

            .section.active {
                display: block;
            }

            @keyframes fadeIn {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .card {
                background-color: #ffffff;
                border-radius: 12px;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
                padding: 30px;
                margin-bottom: 30px;
                border: 1px solid #e2e8f0;
                transition: transform 0.3s ease;
            }

        

            h2 {
                font-family: 'Unbounded', monospace;
                color: #111827;
                font-size: 28px;
                font-weight: 600;
                padding-bottom: 15px;
                margin-bottom: 25px;
                border-bottom: 1px solid #e2e8f0;
            }

            .info-row {
                display: flex;
                margin-bottom: 15px;
                align-items: center;
                flex-wrap: wrap;
            }

            .info-label {
                width: 120px;
                color: #4a5568;
                font-weight: 600;
                font-size: 15px;
            }

            .info-value {
                flex: 1;
                color: #1a1a1a;
                font-size: 15px;
            }

            .edit-btn {
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 25px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
                display: inline-flex;
                align-items: center;
                gap: 8px;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
            }

            th,
            td {
                padding: 12px 15px;
                text-align: left;
                border-bottom: 1px solid #e2e8f0;
            }

            th {
                background-color: #f8fafc;
                font-weight: 600;
                color: #4a5568;
            }

            .status {
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 13px;
                font-weight: 500;
            }

            .status.completed {
                background-color: #e6f7ee;
                color: #0a3f2e;
            }

            .status.pending {
                background-color: #fef5e7;
                color: #f39c12;
            }

            .status.cancelled {
                background-color: #fdeded;
                color: #e94444;
            }

            .wallet-card {
                background: linear-gradient(135deg, #000000d4, #0d131c);
                color: white;
                padding: 40px;
                border-radius: 12px;
                margin-bottom: 30px;
            }

            .wallet-balance {
                font-size: 32px;
                font-weight: 700;
                margin: 15px 0;
                font-family: 'Unbounded', monospace;
            }

            .wallet-label {
                font-size: 14px;
                opacity: 0.8;
            }

            .transaction {
                display: flex;
                justify-content: space-between;
                padding: 15px 0;
                border-bottom: 1px solid #e2e8f0;
                flex-wrap: wrap;
            }

            .transaction:last-child {
                border-bottom: none;
            }

            .amount {
                font-weight: 600;
            }

            .credit {
                color: #10b981;
                font-weight: 600;
            }

            .debit {
                color: #ef4444;
                font-weight: 600;
            }

            .wallet-tabs {
                display: flex;
                gap: 10px;
                margin-bottom: 25px;
                border-bottom: 1px solid #e2e8f0;
                padding-bottom: 10px;
                margin-top: 15px;
                flex-wrap: wrap;
            }

            .wallet-tab {
                padding: 8px 16px;
                border-radius: 10px;
                font-size: 14px;
                cursor: pointer;
                background-color: #f1f5f9;
                border: none;
                color: #64748b;
                transition: all 0.3s ease;
            }

            .wallet-tab.active {
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
            }

            .transaction-date {
                font-size: 14px;
                color: #64748b;
                margin: 15px 0 10px;
                font-weight: 500;
                border-bottom: 1px dashed #e2e8f0;
                padding-bottom: 5px;
            }

            .transaction-info {
                display: flex;
                flex-direction: column;
            }

            .transaction-title {
                font-weight: 500;
                color: #1e293b;
                margin-bottom: 4px;
            }

            .transaction-time {
                font-size: 12px;
                color: #94a3b8;
            }

            .no-transactions {
                text-align: center;
                padding: 30px 0;
                color: #64748b;
                font-style: italic;
            }

            .referral-link {
                padding: 15px;
                background-color: #f8fafc;
                border-radius: 8px;
                margin: 15px 0;
                word-break: break-all;
                font-size: 14px;
            }

            .copy-btn {
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 25px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
                display: inline-flex;
                align-items: center;
                gap: 8px;
            }

            .referral-stats {
                display: flex;
                gap: 20px;
                margin-top: 20px;
                flex-wrap: wrap;
            }

            .stat-box {
                flex: 1;
                padding: 20px;
                background-color: #f8fafc;
                border-radius: 8px;
                text-align: center;
                min-width: 150px;
            }

            .stat-value {
                font-size: 24px;
                font-weight: 700;
                color: #111827;
                margin-bottom: 5px;
                font-family: 'Unbounded', monospace;
            }

            .stat-label {
                color: #4a5568;
                font-size: 14px;
            }

            .modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1000;
                justify-content: center;
                align-items: center;
            }

            .modal.active {
                display: flex;
            }

            .modal-content {
                background-color: #ffffff;
                border-radius: 16px;
                width: 600px;
                max-width: 90%;
                max-height: 90vh;
                overflow-y: auto;
                padding: 30px;
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
                transform: scale(0.95);
                transition: transform 0.3s ease, opacity 0.3s ease;
                opacity: 0;
            }

            .modal.active .modal-content {
                transform: scale(1);
                opacity: 1;
            }

            .modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 25px;
                padding-bottom: 15px;
                border-bottom: 1px solid #e2e8f0;
            }

            .modal-header h3 {
                font-family: 'Unbounded', monospace;
                color: #111827;
                font-size: 24px;
                margin: 0;
            }

            .close-btn {
                cursor: pointer;
                font-size: 24px;
                color: #4a5568;
                transition: color 0.3s ease;
            }



            .modal-form-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
            }

            .form-group {
                margin-bottom: 20px;
                position: relative;
            }

            .form-group label {
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2d3748;
                font-size: 15px;
            }

            .form-group label i {
                color: #0a3f2e;
                font-size: 16px;
            }

            .form-group input {
                width: 100%;
                padding: 12px 16px;
                border: 1px solid #e2e8f0;
                border-radius: 10px;
                font-size: 15px;
                background-color: #f8fafc;
                transition: all 0.3s ease;
            }

            .form-group input:focus {

                background-color: #ffffff;
                box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
                outline: none;
            }

            .form-group input[readonly] {
                background-color: #e2e8f0;
                cursor: not-allowed;
                color: #6b7280;
            }

            .edit-button-group {
                display: flex;
                gap: 10px;
                margin-top: 10px;
            }

            .edit-button-group .edit-btn {
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 25px;
                cursor: pointer;
                text-decoration: none;
                font-size: 14px;
                transition: all 0.3s ease;
            }

            .save-btn {
                background: linear-gradient(90deg, #3d3f3ecb 0%, #000000 100%);
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 25px;
                cursor: pointer;
                width: 100%;
                margin-top: 20px;
                font-size: 15px;
                font-weight: 600;
                transition: all 0.3s ease;
                grid-column: 1 / -1;
            }

            .profile-address-card {
                background-color: #ffffff;
                border-radius: 12px;
                padding: 25px;
                margin-bottom: 20px;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
                border: 1px solid #e2e8f0;
                transition: transform 0.3s ease;
            }

            .profile-address-type {
                display: inline-block;
                background-color: #e6f7ee;
                color: #063124;
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 14px;
                font-weight: 500;
                margin-bottom: 15px;
            }

            .profile-address-details p {
                margin: 8px 0;
                color: #1a1a1a;
                line-height: 1.5;
                font-size: 15px;
            }

            .profile-address-details p strong {
                color: #4a5568;
                margin-right: 8px;
            }

            .profile-address-actions {
                display: flex;
                gap: 10px;
                margin-top: 15px;
                padding-top: 15px;
                border-top: 1px solid #e2e8f0;
                flex-wrap: wrap;
            }

            .profile-edit-btn {
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 25px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                gap: 5px;
            }

            .profile-no-address-card {
                background-color: #ffffff;
                border-radius: 12px;
                padding: 30px;
                text-align: center;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
                border: 1px dashed #e2e8f0;
            }

            .profile-no-address-card h3 {
                font-family: 'Unbounded', monospace;
                color: #111827;
                margin-bottom: 15px;
                font-size: 20px;
            }

            .profile-no-address-card p {
                color: #4a5568;
                margin-bottom: 20px;
                font-size: 15px;
            }

            .profile-pic-preview {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                margin: 0 auto 15px;
                overflow: hidden;
                background-color: #f8fafc;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .profile-pic-preview img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .head {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                flex-wrap: wrap;
                gap: 10px;
                padding-top: 60px;
            }

            .head h4 a {
                text-decoration: none;
                color: #0a3f2e;
                font-weight: 600;
                transition: color 0.3s ease;
            }


            .pagination {
                display: flex;
                justify-content: center;
                align-items: center;
                margin-top: 20px;
                gap: 15px;
                flex-wrap: wrap;
            }

            .pagination-btn {
                padding: 8px 12px;
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                transition: all 0.3s ease;
            }

            .pagination-btn:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

            .page-info {
                font-size: 14px;
                color: #555555;
            }

            .transaction-page {
                margin-bottom: 10px;
            }

            .menu-toggle {
                display: none;
                position: fixed;
                top: 15px;
                left: 15px;
                background: linear-gradient(90deg, #636566 0%, #262729 100%);
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 8px;
                cursor: pointer;
                z-index: 1100;
                font-size: 16px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            }

            .personal-info-card {
                background-color: #ffffff;
                border-radius: 16px;
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
                padding: 30px;
                margin-bottom: 30px;
                border: 1px solid #e5e7eb;
                transition: transform 0.3s ease;
            }

            .personal-info-profile-pic {
                position: relative;
                width: 140px;
                height: 140px;
                margin: 0 auto 25px;
                transition: transform 0.3s ease;
            }

        

            .personal-info-avatar {
                width: 100%;
                height: 100%;
                border-radius: 50%;
                background-color: #636566;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 48px;
                font-weight: bold;
                overflow: hidden;
                border: 4px solid #e2e8f0;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            }

            .personal-info-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .personal-info-edit-pic {
                position: absolute;
                bottom: 5px;
                right: 5px;
                background: linear-gradient(90deg, #0a3f2e 0%, #033023 100%);
                color: white;
                border: none;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 18px;
                transition: all 0.3s ease;
            }

            .personal-info-details {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 25px;
                max-width: 700px;
                margin: 0 auto;
            }

            .personal-info-item {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 15px;
                background-color: #f8fafc;
                border-radius: 10px;
                transition: background-color 0.3s ease;
            }

        
            .personal-info-item-icon {
                color: #0a3f2e;
                font-size: 20px;
            }

            .personal-info-item-content {
                flex: 1;
            }

            .personal-info-item-label {
                color: #4a5568;
                font-weight: 600;
                font-size: 15px;
                margin-bottom: 5px;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .personal-info-item-value {
                color: #1a1a1a;
                font-size: 16px;
                word-break: break-word;
                line-height: 1.4;
            }

            @media (max-width: 1024px) {
                .sidebar {
                    width: 250px;
                }

                .content {
                    margin-left: 250px;
                    padding: 30px;
                }

                .card,
                .personal-info-card {
                    padding: 20px;
                }

                .wallet-balance {
                    font-size: 28px;
                }

                .modal-content {
                    width: 95%;
                    padding: 20px;
                }

                .modal-form-grid {
                    grid-template-columns: 1fr;
                }

                .info-row {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 5px;
                }

                .info-label {
                    width: 100%;
                }

                .referral-stats {
                    gap: 15px;
                }

                .stat-box {
                    min-width: 120px;
                }

                .personal-info-profile-pic {
                    width: 120px;
                    height: 120px;
                }

                .personal-info-edit-pic {
                    width: 36px;
                    height: 36px;
                    font-size: 16px;
                }

                .personal-info-details {
                    grid-template-columns: 1fr;
                    gap: 20px;
                }
            }

            @media (max-width: 768px) {
                .menu-toggle {
                    display: block;
                    top: 100px;
                    left: 10px;
                    z-index: 1200;
                    position: absolute;
                    z-index: -1;
                }
                .header__announcement-bar{
                    display: none;
                }

                .sidebar {
                    width: 250px;
                    transform: translateX(-100%);
                    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
                }

                .sidebar.active {
                    transform: translateX(0);
                }

                .content {
                    margin-left: 0;
                    padding: 20px;
                    padding-top: 60px;
                    transition: transform 0.3s ease;
                }

                .content.active {
                    transform: translateX(250px);
                }

                h2 {
                    font-size: 24px;
                }

                .head {
                    padding-top: 50px;
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 15px;
                }

                .wallet-balance {
                    font-size: 24px;
                }

                .card,
                .personal-info-card {
                    padding: 15px;
                }

                .avatar {
                    width: 60px;
                    height: 60px;
                    font-size: 20px;
                }

                .user-info h3 {
                    font-size: 16px;
                }

                .user-info p {
                    font-size: 13px;
                }

                .menu li {
                    font-size: 15px;
                    padding: 10px 15px;
                }

                .menu li i {
                    margin-right: 8px;
                    font-size: 15px;
                }

                table {
                    display: block;
                    overflow-x: auto;
                    white-space: nowrap;
                }

                th,
                td {
                    padding: 10px;
                    font-size: 14px;
                }

                .profile-pic-preview {
                    width: 120px;
                    height: 120px;
                }

                .modal-header h3 {
                    font-size: 20px;
                }

                .save-btn,
                .edit-btn,
                .profile-edit-btn,
                .copy-btn {
                    padding: 8px 16px;
                    font-size: 14px;
                }

                .pagination-btn {
                    padding: 6px 10px;
                    font-size: 14px;
                }

                .page-info {
                    font-size: 13px;
                }

                .personal-info-profile-pic {
                    width: 100px;
                    height: 100px;
                }

                .personal-info-edit-pic {
                    width: 32px;
                    height: 32px;
                    font-size: 14px;
                }

                .personal-info-item {
                    padding: 12px;
                }

                .personal-info-item-icon {
                    font-size: 18px;
                }
            }

            @media (max-width: 480px) {
                .sidebar {
                    width: 100%;
                    height: auto;
                    min-height: 100vh;
                    transform: translateX(-100%);
                    padding: 20px;
                }

                .sidebar.active {
                    transform: translateX(0);
                }

                .content {
                    padding: 15px;
                    padding-top: 50px;
                }

                .content.active {
                    transform: translateX(100%);
                }

                .head {
                    padding-top: 40px;
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 10px;
                }

                h2 {
                    font-size: 20px;
                }

                .card,
                .personal-info-card {
                    padding: 12px;
                    margin-bottom: 20px;
                }

                .wallet-balance {
                    font-size: 20px;
                }

                .avatar {
                    width: 50px;
                    height: 50px;
                    font-size: 18px;
                }

                .user-info h3 {
                    font-size: 14px;
                }

                .user-info p {
                    font-size: 12px;
                }

                .menu li {
                    font-size: 14px;
                    padding: 8px 12px;
                }

                .menu li i {
                    margin-right: 8px;
                    width: 18px;
                    font-size: 14px;
                }

                th,
                td {
                    padding: 8px;
                    font-size: 13px;
                }

                .profile-pic-preview {
                    width: 100px;
                    height: 100px;
                }

                .modal-content {
                    padding: 15px;
                    max-height: 85vh;
                }

                .modal-header h3 {
                    font-size: 18px;
                }

                .save-btn,
                .edit-btn,
                .profile-edit-btn,
                .copy-btn {
                    padding: 8px 14px;
                    font-size: 13px;
                }

                .pagination-btn {
                    padding: 5px 8px;
                    font-size: 13px;
                }

                .page-info {
                    font-size: 12px;
                }

                .wallet-tabs {
                    gap: 8px;
                }

                .wallet-tab {
                    padding: 6px 12px;
                    font-size: 13px;
                }

                .transaction-date {
                    font-size: 13px;
                }

                .transaction {
                    flex-direction: column;
                    gap: 10px;
                }

                .transaction-info {
                    width: 100%;
                }

                .amount {
                    text-align: right;
                }

                .referral-link {
                    font-size: 13px;
                    padding: 10px;
                }

                .stat-box {
                    min-width: 100%;
                }

                .stat-value {
                    font-size: 20px;
                }

                .stat-label {
                    font-size: 13px;
                }

                .menu-toggle {
                    top: 8px;
                    left: 8px;
                    padding: 8px 12px;
                    font-size: 14px;
                }

                .personal-info-profile-pic {
                    width: 80px;
                    height: 80px;
                }

                .personal-info-edit-pic {
                    width: 28px;
                    height: 28px;
                    font-size: 12px;
                }

                .personal-info-item {
                    padding: 10px;
                }

                .personal-info-item-icon {
                    font-size: 16px;
                }

                .menu li {
                    padding: 10px 12px;
                }
            }

            /* Improved Profile Picture Modal CSS */
            #profilePicModal {
                display: none; /* Hidden by default */
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent background */
                z-index: 1000;
                justify-content: center;
                align-items: center;
            }

            #profilePicModal.active {
                display: flex; /* Show modal when active */
            }

            #profilePicModal .modal-content {
                background-color: #ffffff;
                border-radius: 12px;
                padding: 30px;
                width: 90%;
                max-width: 500px;
                box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
                position: relative;
                animation: fadeIn 0.3s ease-in-out;
            }

            #profilePicModal .modal-content .form-group {
                text-align: center;
            }

            #profilePicModal .profile-pic-preview {
                width: 120px;
                height: 120px;
                border-radius: 50%;
                overflow: hidden;
                margin: 0 auto 15px;
                border: 2px solid #e2e8f0;
                background-color: #f8f9fa;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            #profilePicModal .profile-pic-preview img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            #profilePicModal .edit-btn {
                display: inline-block;
                background-color: #2b3a55;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

            #profilePicModal .edit-btn:hover {
                background-color: #1a1f2a;
            }

            #profilePicModal .save-btn {
                display: inline-block;
                background-color: #1b5e5a;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.3s ease;
                margin-top: 15px;
            }

            #profilePicModal .save-btn:hover {
                background-color: #144d4a;
            }

            #profilePicModal .remove-btn {
                display: inline-block;
                background-color: #e74c3c;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.3s ease;
                margin-top: 15px;
            }

            #profilePicModal .remove-btn:hover {
                background-color: #c0392b;
            }

            #profilePicModal .close-btn {
                position: absolute;
                top: 15px;
                right: 15px;
                background-color: transparent;
                border: none;
                font-size: 20px;
                color: #6c757d;
                cursor: pointer;
                transition: color 0.3s ease;
            }

            #profilePicModal .close-btn:hover {
                color: #000000;
            }

            /* Fade-in animation */
            @keyframes fadeIn {
                from {
                    opacity: 0;
                    transform: scale(0.9);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }
        </style>
    </head>
    <body>
        <button class="menu-toggle"><i class="fas fa-bars"></i> Menu</button>
        <div class="container-aside">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="user-info">
                    <div class="avatar">
                        <% if (user.profilePic) { %>
                            <img src="<%= user.profilePic %>" alt="Profile Picture">
                        <% } else { %>
                            <%= user.name.charAt(0).toUpperCase() %>
                        <% } %>
                    </div>
                    <h3><%= user.name %></h3>
                    <p><%= user.email %></p>
                </div>
                <ul class="menu">
                    <li class="active" data-target="personal-info"><i class="fas fa-user"></i> Personal Information</li>
                    <li data-target="profile-address-section"><i class="fas fa-map-marker-alt"></i> My Address</li>
                    <li><a href="/order"><i class="fas fa-box"></i> My Orders</a></li>
                    <li data-target="wallet"><i class="fas fa-wallet"></i> Wallet</li>
                    <li data-target="referrals"><i class="fas fa-users"></i> Referrals</li>
                    <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </div>

            <!-- Main Content -->
            <div class="content">
                <!-- Personal Information Section -->
                <div class="section active" id="personal-info">
                    <div class="head">
                        <h2>Personal Information</h2>
                        <button class="edit-btn" id="editPersonalInfo"><i class="fas fa-edit"></i> Edit Information</button>
                    </div>
                    <div class="personal-info-card">
                        <div class="personal-info-profile-pic">
                            <div class="personal-info-avatar">
                                <% if (user.profilePic) { %>
                                    <img src="<%= user.profilePic %>" alt="Profile Picture">
                                <% } else { %>
                                    <%= user.name.charAt(0).toUpperCase() %>
                                <% } %>
                            </div>
                            <button class="personal-info-edit-pic" title="Change Profile Picture" id="personalInfoChangeProfilePic"><i class="fas fa-camera"></i></button>
                        </div>
                        <div class="personal-info-details">
                            <div class="personal-info-item">
                                <i class="fas fa-user personal-info-item-icon"></i>
                                <div class="personal-info-item-content">
                                    <div class="personal-info-item-label">Full Name</div>
                                    <div class="personal-info-item-value"><%= user.name %></div>
                                </div>
                            </div>
                            <div class="personal-info-item">
                                <i class="fas fa-phone personal-info-item-icon"></i>
                                <div class="personal-info-item-content">
                                    <div class="personal-info-item-label">Phone</div>
                                    <div class="personal-info-item-value"><%= user.phone %></div>
                                </div>
                            </div>
                            <div class="personal-info-item">
                                <i class="fas fa-envelope personal-info-item-icon"></i>
                                <div class="personal-info-item-content">
                                    <div class="personal-info-item-label">Email</div>
                                    <div class="personal-info-item-value"><%= user.email %></div>
                                </div>
                            </div>
                            <div class="personal-info-item">
                                <i class="fas fa-lock personal-info-item-icon"></i>
                                <div class="personal-info-item-content">
                                    <div class="personal-info-item-label">Password</div>
                                    <div class="personal-info-item-value">••••••••</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Personal Information Modal (Unchanged) -->
                <div class="modal" id="personalInfoModal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3>Edit Personal Information</h3>
                            <span class="close-btn">×</span>
                        </div>
                        <form id="personalInfoForm" class="modal-form-grid">
                            <div class="form-group">
                                <label for="fullName"><i class="fas fa-user"></i> Full Name</label>
                                <input type="text" id="fullName" name="fullName" value="<%= user.name %>" placeholder="Enter your full name">
                            </div>
                            <div class="form-group">
                                <label for="phone"><i class="fas fa-phone"></i> Phone</label>
                                <input type="tel" id="phone" name="phone" value="<%= user.phone %>" placeholder="Enter your phone number">
                            </div>
                            <div class="form-group">
                                <label for="email"><i class="fas fa-envelope"></i> Email</label>
                                <input type="email" id="email" value="<%= user.email %>" readonly>
                                <div class="edit-button-group">
                                    <a href="/changeEmail" class="edit-btn">Change Email</a>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="password"><i class="fas fa-lock"></i> Password</label>
                                <input type="password" id="password" value="••••••••" readonly>
                                <div class="edit-button-group">
                                    <a href="/changePassword" class="edit-btn">Change Password</a>
                                </div>
                            </div>
                            <button type="submit" class="save-btn">Save Changes</button>
                        </form>
                    </div>
                </div>

                <!-- Profile Picture Modal -->
                <div class="modal" id="profilePicModal">
                <div class="modal-content">
                    <form id="profilePicForm" enctype="multipart/form-data">
                        <div class="form-group">
                            <div class="profile-pic-preview">
                                <img id="profilePicPreview" src="<%= user.profilePic || 'https://via.placeholder.com/150' %>" alt="">
                            </div>
                            <label for="profilePicInput" class="edit-btn" style="display: block; text-align: center; margin: 15px auto;">
                                <i class="fas fa-upload"></i> Choose Image
                            </label>
                            <input type="file" id="profilePicInput" name="profilePic" accept="image/*" style="display: none;">
                        </div>
                        <button type="submit" class="save-btn"><i class="fas fa-save"></i> Upload Picture</button>
                    </form>
                    <button id="removeProfilePicBtn" class="remove-btn" style="margin-top: 15px; background-color: #e74c3c; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                        <i class="fas fa-trash"></i> Remove Picture
                    </button>
                </div>
            </div>

                <!-- Address Section -->
                <div class="section" id="profile-address-section">
                    <div class="head">
                        <h2>My Address</h2>
                        <button class="profile-edit-btn"><a href="/addAddress" style="color: white; text-decoration: none;"><i class="fas fa-plus"></i> Add New Address</a></button>
                    </div>
                    <% if (userAddress) { %>
                        <% userAddress.address.forEach((address) => { %>
                            <div class="profile-address-card">
                                <div class="profile-address-type"><%= address.addressType %></div>
                                <div class="profile-address-details">
                                    <p><strong>Name:</strong> <%= address.name %></p>
                                    <p><strong>Address:</strong> <%= address.landmark %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                    <p><strong>Phone:</strong> <%= address.phone %></p>
                                    <% if (address.altPhone) { %>
                                        <p><strong>Alternate Phone:</strong> <%= address.altPhone %></p>
                                    <% } %>
                                </div>
                                <div class="profile-address-actions">
                                    <button class="profile-edit-btn" onclick="openEditAddressModal('<%= address._id %>', '<%= address.addressType %>', '<%= address.name %>', '<%= address.city %>', '<%= address.landmark %>', '<%= address.state %>', '<%= address.pincode %>', '<%= address.phone %>', '<%= address.altPhone %>')">
                                        <i class="fas fa-edit"></i> Edit Address
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="profile-no-address-card">
                            <h3>No Addresses Found</h3>
                            <p>You haven't added any addresses yet. Add your first address to get started.</p>
                            <button class="profile-edit-btn">
                                <a href="/addAddress" style="color: white; text-decoration: none;"><i class="fas fa-plus"></i> Add New Address</a>
                            </button>
                        </div>
                    <% } %>

                    <!-- Edit Address Modal -->
                    <div class="modal" id="editAddressModal">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3>Edit Address</h3>
                                <span class="close-btn">×</span>
                            </div>
                            <form id="editAddressForm" class="modal-form-grid">
                                <input type="hidden" id="editAddressId">
                                <div class="form-group">
                                    <label for="editAddressType"><i class="fas fa-home"></i> Address Type</label>
                                    <input type="text" id="editAddressType" name="addressType" placeholder="Home, Work, etc.">
                                </div>
                                <div class="form-group">
                                    <label for="editName"><i class="fas fa-user"></i> Full Name</label>
                                    <input type="text" id="editName" name="name" placeholder="Enter full name">
                                </div>
                                <div class="form-group">
                                    <label for="editPhone"><i class="fas fa-phone"></i> Phone Number</label>
                                    <input type="tel" id="editPhone" name="phone" placeholder="Enter phone number">
                                </div>
                                <div class="form-group">
                                    <label for="editAltPhone"><i class="fas fa-phone-alt"></i> Alternate Phone (Optional)</label>
                                    <input type="tel" id="editAltPhone" name="altPhone" placeholder="Enter alternate phone number">
                                </div>
                                <div class="form-group">
                                    <label for="editLandmark"><i class="fas fa-map-pin"></i> Landmark</label>
                                    <input type="text" id="editLandmark" name="landmark" placeholder="Nearby landmark">
                                </div>
                                <div class="form-group">
                                    <label for="editCity"><i class="fas fa-city"></i> City</label>
                                    <input type="text" id="editCity" name="city" placeholder="Enter city">
                                </div>
                                <div class="form-group">
                                    <label for="editState"><i class="fas fa-map"></i> State</label>
                                    <input type="text" id="editState" name="state" placeholder="Enter state">
                                </div>
                                <div class="form-group">
                                    <label for="editPincode"><i class="fas fa-mailbox"></i> Pincode</label>
                                    <input type="text" id="editPincode" name="pincode" placeholder="Enter pincode">
                                </div>
                                <button type="submit" class="save-btn"><i class="fas fa-save"></i> Save Changes</button>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Orders Section -->
                <div class="section" id="orders">
                    <div class="head">
                        <h2>My Orders</h2>
                    </div>
                    <div class="card">
                        <table>
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Date</th>
                                    <th>Items</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>#12345</td>
                                    <td>Mar 10, 2025</td>
                                    <td>3 items</td>
                                    <td>$124.99</td>
                                    <td><span class="status completed">Delivered</span></td>
                                    <td><a href="#" style="color: #0a3f2e;"><i class="fas fa-eye"></i> View Details</a></td>
                                </tr>
                                <tr>
                                    <td>#12344</td>
                                    <td>Feb 25, 2025</td>
                                    <td>1 item</td>
                                    <td>$59.99</td>
                                    <td><span class="status completed">Delivered</span></td>
                                    <td><a href="#" style="color: #0a3f2e;"><i class="fas fa-eye"></i> View Details</a></td>
                                </tr>
                                <tr>
                                    <td>#12343</td>
                                    <td>Feb 14, 2025</td>
                                    <td>2 items</td>
                                    <td>$79.98</td>
                                    <td><span class="status pending">In Transit</span></td>
                                    <td><a href="#" style="color: #0a3f2e;"><i class="fas fa-map-marker-alt"></i> Track Order</a></td>
                                </tr>
                                <tr>
                                    <td>#12342</td>
                                    <td>Jan 30, 2025</td>
                                    <td>5 items</td>
                                    <td>$249.95</td>
                                    <td><span class="status cancelled">Cancelled</span></td>
                                    <td><a href="#" style="color: #0a3f2e;"><i class="fas fa-eye"></i> View Details</a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Wallet Section -->
                <div class="section" id="wallet">
                    <div class="head">
                        <h2>My Wallet</h2>
                    </div>
                    <div class="wallet-card">
                        <div class="wallet-label">Current Balance</div>
                        <div class="wallet-balance">₹<%= walletBalance || '0.00' %></div>
                    </div>
                    <!-- <div class="card">
                        <h3>Add Money to Wallet</h3>
                        <div class="form-group">
                            <label for="walletAmount"><i class="fas fa-money-bill-wave"></i> Amount</label>
                            <input type="number" id="walletAmount" min="1" step="0.01" placeholder="Enter amount">
                        </div>
                        <button id="addMoneyBtn" class="edit-btn"><i class="fas fa-plus"></i> Add Money</button>
                        <div id="walletMessage" style="margin-top: 10px;"></div>
                    </div> -->
                    <div class="card">
                        <h3>Transaction History</h3>
                        <% if (typeof walletTransactions !== 'undefined' && walletTransactions && walletTransactions.length > 0) { %>
                            <% 
                            const sortedTransactions = [...walletTransactions].sort((a, b) => new Date(b.date) - new Date(a.date));
                            const groupedTransactions = {};
                            const formatDate = (date) => {
                                const d = new Date(date);
                                const today = new Date();
                                const yesterday = new Date(today);
                                yesterday.setDate(yesterday.getDate() - 1);
                                if (d.setHours(0,0,0,0) === today.setHours(0,0,0,0)) {
                                    return 'Today';
                                } else if (d.setHours(0,0,0,0) === yesterday.setHours(0,0,0,0)) {
                                    return 'Yesterday';
                                } else {
                                    return d.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                                }
                            };
                            sortedTransactions.forEach(transaction => {
                                const dateKey = formatDate(transaction.date);
                                if (!groupedTransactions[dateKey]) {
                                    groupedTransactions[dateKey] = [];
                                }
                                groupedTransactions[dateKey].push(transaction);
                            });
                            const creditTransactions = sortedTransactions.filter(t => t.type === 'credit');
                            const debitTransactions = sortedTransactions.filter(t => t.type === 'debit');
                            const itemsPerPage = 5;
                            const totalAllPages = Math.ceil(sortedTransactions.length / itemsPerPage);
                            const totalCreditPages = Math.ceil(creditTransactions.length / itemsPerPage);
                            const totalDebitPages = Math.ceil(debitTransactions.length / itemsPerPage);
                            %>
                            <div class="wallet-tabs">
                                <button class="wallet-tab active" data-filter="all">All Transactions</button>
                                <button class="wallet-tab" data-filter="credit">Money Credited (<%= creditTransactions.length %>)</button>
                                <button class="wallet-tab" data-filter="debit">Money Debited (<%= debitTransactions.length %>)</button>
                            </div>
                            <div class="transaction-container" id="all-transactions">
                                <% 
                                const allTransactionsByPage = {};
                                let allPageIndex = 0;
                                let allItemsOnCurrentPage = 0;
                                Object.keys(groupedTransactions).forEach(date => {
                                    groupedTransactions[date].forEach(transaction => {
                                        if (allItemsOnCurrentPage >= itemsPerPage) {
                                            allPageIndex++;
                                            allItemsOnCurrentPage = 0;
                                        }
                                        if (!allTransactionsByPage[allPageIndex]) {
                                            allTransactionsByPage[allPageIndex] = {};
                                        }
                                        if (!allTransactionsByPage[allPageIndex][date]) {
                                            allTransactionsByPage[allPageIndex][date] = [];
                                        }
                                        allTransactionsByPage[allPageIndex][date].push(transaction);
                                        allItemsOnCurrentPage++;
                                    });
                                });
                                Object.keys(allTransactionsByPage).forEach((pageIndex, idx) => {
                                    const display = idx === 0 ? 'block' : 'none';
                                %>
                                    <div class="transaction-page all-page" data-page="<%= parseInt(pageIndex) + 1 %>" style="display: <%= display %>">
                                        <% Object.keys(allTransactionsByPage[pageIndex]).forEach(date => { %>
                                            <div class="transaction-date"><%= date %></div>
                                            <% allTransactionsByPage[pageIndex][date].forEach(transaction => { %>
                                                <div class="transaction transaction-all">
                                                    <div class="transaction-info">
                                                        <div class="transaction-title"><%= transaction.description %></div>
                                                        <div class="transaction-time">
                                                            <%= new Date(transaction.date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                                        </div>
                                                    </div>
                                                    <div class="amount <%= transaction.type === 'credit' ? 'credit' : 'debit' %>">
                                                        <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= Math.abs(transaction.amount).toFixed(2) %>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        <% }); %>
                                    </div>
                                <% }); %>
                                <% if (totalAllPages > 1) { %>
                                    <div class="pagination" id="all-pagination">
                                        <button class="pagination-btn" id="all-prev-btn" disabled><i class="fas fa-chevron-left"></i> Previous</button>
                                        <span class="page-info" id="all-page-info">Page 1 of <%= totalAllPages %></span>
                                        <button class="pagination-btn" id="all-next-btn">Next <i class="fas fa-chevron-right"></i></button>
                                    </div>
                                <% } %>
                            </div>
                            <div class="transaction-container" id="credit-transactions" style="display: none;">
                                <% if (creditTransactions.length > 0) { %>
                                    <% 
                                    const creditGrouped = {};
                                    creditTransactions.forEach(transaction => {
                                        const dateKey = formatDate(transaction.date);
                                        if (!creditGrouped[dateKey]) {
                                            creditGrouped[dateKey] = [];
                                        }
                                        creditGrouped[dateKey].push(transaction);
                                    });
                                    const creditTransactionsByPage = {};
                                    let creditPageIndex = 0;
                                    let creditItemsOnPage = 0;
                                    Object.keys(creditGrouped).forEach(date => {
                                        creditGrouped[date].forEach(transaction => {
                                            if (creditItemsOnPage >= itemsPerPage) {
                                                creditPageIndex++;
                                                creditItemsOnPage = 0;
                                            }
                                            if (!creditTransactionsByPage[creditPageIndex]) {
                                                creditTransactionsByPage[creditPageIndex] = {};
                                            }
                                            if (!creditTransactionsByPage[creditPageIndex][date]) {
                                                creditTransactionsByPage[creditPageIndex][date] = [];
                                            }
                                            creditTransactionsByPage[creditPageIndex][date].push(transaction);
                                            creditItemsOnPage++;
                                        });
                                    });
                                    Object.keys(creditTransactionsByPage).forEach((pageIndex, idx) => {
                                        const display = idx === 0 ? 'block' : 'none';
                                    %>
                                        <div class="transaction-page credit-page" data-page="<%= parseInt(pageIndex) + 1 %>" style="display: <%= display %>">
                                            <% Object.keys(creditTransactionsByPage[pageIndex]).forEach(date => { %>
                                                <div class="transaction-date"><%= date %></div>
                                                <% creditTransactionsByPage[pageIndex][date].forEach(transaction => { %>
                                                    <div class="transaction">
                                                        <div class="transaction-info">
                                                            <div class="transaction-title"><%= transaction.description %></div>
                                                            <div class="transaction-time">
                                                                <%= new Date(transaction.date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                                            </div>
                                                        </div>
                                                        <div class="amount credit">+₹<%= transaction.amount.toFixed(2) %></div>
                                                    </div>
                                                <% }); %>
                                            <% }); %>
                                        </div>
                                    <% }); %>
                                    <% if (totalCreditPages > 1) { %>
                                        <div class="pagination" id="credit-pagination">
                                            <button class="pagination-btn" id="credit-prev-btn" disabled><i class="fas fa-chevron-left"></i> Previous</button>
                                            <span class="page-info" id="credit-page-info">Page 1 of <%= totalCreditPages %></span>
                                            <button class="pagination-btn" id="credit-next-btn">Next <i class="fas fa-chevron-right"></i></button>
                                        </div>
                                    <% } %>
                                <% } else { %>
                                    <div class="no-transactions">No credit transactions found.</div>
                                <% } %>
                            </div>
                            <div class="transaction-container" id="debit-transactions" style="display: none;">
                                <% if (debitTransactions.length > 0) { %>
                                    <% 
                                    const debitGrouped = {};
                                    debitTransactions.forEach(transaction => {
                                        const dateKey = formatDate(transaction.date);
                                        if (!debitGrouped[dateKey]) {
                                            debitGrouped[dateKey] = [];
                                        }
                                        debitGrouped[dateKey].push(transaction);
                                    });
                                    const debitTransactionsByPage = {};
                                    let debitPageIndex = 0;
                                    let debitItemsOnPage = 0;
                                    Object.keys(debitGrouped).forEach(date => {
                                        debitGrouped[date].forEach(transaction => {
                                            if (debitItemsOnPage >= itemsPerPage) {
                                                debitPageIndex++;
                                                debitItemsOnPage = 0;
                                            }
                                            if (!debitTransactionsByPage[debitPageIndex]) {
                                                debitTransactionsByPage[debitPageIndex] = {};
                                            }
                                            if (!debitTransactionsByPage[debitPageIndex][date]) {
                                                debitTransactionsByPage[debitPageIndex][date] = [];
                                            }
                                            debitTransactionsByPage[debitPageIndex][date].push(transaction);
                                            debitItemsOnPage++;
                                        });
                                    });
                                    Object.keys(debitTransactionsByPage).forEach((pageIndex, idx) => {
                                        const display = idx === 0 ? 'block' : 'none';
                                    %>
                                        <div class="transaction-page debit-page" data-page="<%= parseInt(pageIndex) + 1 %>" style="display: <%= display %>">
                                            <% Object.keys(debitTransactionsByPage[pageIndex]).forEach(date => { %>
                                                <div class="transaction-date"><%= date %></div>
                                                <% debitTransactionsByPage[pageIndex][date].forEach(transaction => { %>
                                                    <div class="transaction">
                                                        <div class="transaction-info">
                                                            <div class="transaction-title"><%= transaction.description %></div>
                                                            <div class="transaction-time">
                                                                <%= new Date(transaction.date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                                                            </div>
                                                        </div>
                                                        <div class="amount debit">-₹<%= Math.abs(transaction.amount).toFixed(2) %></div>
                                                    </div>
                                                <% }); %>
                                            <% }); %>
                                        </div>
                                    <% }); %>
                                    <% if (totalDebitPages > 1) { %>
                                        <div class="pagination" id="debit-pagination">
                                            <button class="pagination-btn" id="debit-prev-btn" disabled><i class="fas fa-chevron-left"></i> Previous</button>
                                            <span class="page-info" id="debit-page-info">Page 1 of <%= totalDebitPages %></span>
                                            <button class="pagination-btn" id="debit-next-btn">Next <i class="fas fa-chevron-right"></i></button>
                                        </div>
                                    <% } %>
                                <% } else { %>
                                    <div class="no-transactions">No debit transactions found.</div>
                                <% } %>
                            </div>
                        <% } else { %>
                            <div class="no-transactions">No transaction history available.</div>
                        <% } %>
                    </div>
                </div>

                <!-- Referrals Section -->
                <div class="section" id="referrals">
                    <div class="head">
                        <h2>Referrals</h2>
                    </div>
                    <div class="card">
                        <h3>Share Your Referral Link</h3>
                        <p>Invite friends and earn $25 when they make their first purchase!</p>
                        <div class="referral-link"> 'JOHNDOE123' %></div>
                        <button class="copy-btn"><i class="fas fa-copy"></i> Copy Link</button>
                        <div class="referral-stats">
                            <div class="stat-box">
                                <div class="stat-value">6</div>
                                <div class="stat-label">People Invited</div>
                            </div>
                            <div class="stat-box">
                                <div class="stat-value">4</div>
                                <div class="stat-label">Successful Referrals</div>
                            </div>
                            <div class="stat-box">
                                <div class="stat-value">$100</div>
                                <div class="stat-label">Total Earned</div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <h3>Referral History</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Reward</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Alice Johnson</td>
                                    <td>Mar 15, 2025</td>
                                    <td><span class="status completed">Completed</span></td>
                                    <td>$25.00</td>
                                </tr>
                                <tr>
                                    <td>Bob Smith</td>
                                    <td>Feb 20, 2025</td>
                                    <td><span class="status completed">Completed</span></td>
                                    <td>$25.00</td>
                                </tr>
                                <tr>
                                    <td>Carol Williams</td>
                                    <td>Jan 10, 2025</td>
                                    <td><span class="status completed">Completed</span></td>
                                    <td>$25.00</td>
                                </tr>
                                <tr>
                                    <td>David Brown</td>
                                    <td>Mar 5, 2025</td>
                                    <td><span class="status pending">Pending</span></td>
                                    <td>$0.00</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Referral Code Section -->
                <div class="section" id="referral-code-section">
                    <div class="head">
                        <h2>Your Referral Code</h2>
                    </div>
                    <div class="card">
                        <div class="referral-section">
                            <h3>Your Referral Code</h3>
                            <p><strong><%= user.referralCode %></strong></p>
                            <h3>Your Referral Link</h3>
                            <p>
                                <input type="text" value="https://yourdomain.com/signup?ref=<%= user.referralCode %>" id="referralLink" readonly>
                                <button onclick="copyReferralLink()">Copy</button>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- SweetAlert2 JS -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>

document.addEventListener('DOMContentLoaded', function () {
    // Menu navigation
    const menuItems = document.querySelectorAll('.menu li');
    const sections = document.querySelectorAll('.section');

    function showSection(targetId) {
        sections.forEach(section => section.classList.remove('active'));
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
            targetSection.classList.add('active');
        }
        menuItems.forEach(menuItem => menuItem.classList.remove('active'));
        const activeMenuItem = document.querySelector(`.menu li[data-target="${targetId}"]`);
        if (activeMenuItem) {
            activeMenuItem.classList.add('active');
        }

        // Close sidebar on mobile after section selection
        if (window.innerWidth <= 768) {
            document.querySelector('.sidebar').classList.remove('active');
            document.querySelector('.content').classList.remove('active');
            document.querySelector('.menu-toggle').innerHTML = '<i class="fas fa-bars"></i> Menu';
        }
    }

    menuItems.forEach(item => {
        if (!item.querySelector('a[href="/logout"]') && !item.querySelector('a[href="/order"]')) {
            item.addEventListener('click', function () {
                const targetId = this.getAttribute('data-target');
                if (targetId) {
                    showSection(targetId);
                    localStorage.setItem('activeSection', targetId);
                }
            });
        }
    });

    // Load active section from localStorage
    let activeSection = localStorage.getItem('activeSection') || 'personal-info';
    if (activeSection === 'dashboard') {
        activeSection = 'personal-info';
    }
    showSection(activeSection);

    // Mobile menu toggle
    const menuToggle = document.querySelector('.menu-toggle');
    const sidebar = document.querySelector('.sidebar');
    const content = document.querySelector('.content');

    if (menuToggle) {
        menuToggle.addEventListener('click', function () {
            sidebar.classList.toggle('active');
            content.classList.toggle('active');
            menuToggle.innerHTML = sidebar.classList.contains('active')
                ? '<i class="fas fa-times"></i> Close'
                : '<i class="fas fa-bars"></i> Menu';
        });
    }

    // Close sidebar when clicking outside on mobile
    document.addEventListener('click', function (event) {
        if (window.innerWidth <= 768 && !sidebar.contains(event.target) && !menuToggle.contains(event.target)) {
            sidebar.classList.remove('active');
            content.classList.remove('active');
            menuToggle.innerHTML = '<i class="fas fa-bars"></i> Menu';
        }
    });

    // Close sidebar on resize
    window.addEventListener('resize', function () {
        if (window.innerWidth > 768) {
            sidebar.classList.remove('active');
            content.classList.remove('active');
            menuToggle.innerHTML = '<i class="fas fa-bars"></i> Menu';
        }
    });

    // Wallet tab switching
    const walletTabs = document.querySelectorAll('.wallet-tab');
    const transactionContainers = document.querySelectorAll('.transaction-container');

    walletTabs.forEach(tab => {
        tab.addEventListener('click', function () {
            console.log('Wallet tab clicked:', this.getAttribute('data-filter')); // Debug log
            walletTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            transactionContainers.forEach(container => {
                container.style.display = 'none';
            });
            const filter = this.getAttribute('data-filter');
            const targetContainer = document.getElementById(`${filter}-transactions`);
            if (targetContainer) {
                targetContainer.style.display = 'block';
            }
            // Reset pagination for the selected tab
            setupPagination(filter);
            // Close sidebar on mobile
            if (window.innerWidth <= 768) {
                sidebar.classList.remove('active');
                content.classList.remove('active');
                menuToggle.innerHTML = '<i class="fas fa-bars"></i> Menu';
            }
        });
    });

    // Pagination functionality
    function setupPagination(type) {
    const pages = document.querySelectorAll(`.${type}-page`);
    const prevBtn = document.getElementById(`${type}-prev-btn`);
    const nextBtn = document.getElementById(`${type}-next-btn`);
    const pageInfo = document.getElementById(`${type}-page-info`);

    if (!pages.length || !prevBtn || !nextBtn || !pageInfo) {
        console.warn(`Pagination elements for ${type} not found.`);
        return;
    }

    let currentPage = 1;
    const totalPages = pages.length;

    function updatePagination() {
        pages.forEach(page => {
            page.style.display = 'none';
        });
        const activePage = document.querySelector(`.${type}-page[data-page="${currentPage}"]`);
        if (activePage) {
            activePage.style.display = 'block';
        } else {
            console.warn(`No page found for ${type} with data-page="${currentPage}"`);
        }
        prevBtn.disabled = currentPage === 1;
        nextBtn.disabled = currentPage === totalPages;
        pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
        console.log(`Updated pagination for ${type}: Page ${currentPage} of ${totalPages}`); // Debug log
    }

    // Remove existing listeners to prevent duplicates
    const newPrevBtn = prevBtn.cloneNode(true);
    prevBtn.parentNode.replaceChild(newPrevBtn, prevBtn);
    const newNextBtn = nextBtn.cloneNode(true);
    nextBtn.parentNode.replaceChild(newNextBtn, nextBtn);

    // Attach new listeners
    newPrevBtn.addEventListener('click', function () {
        console.log(`Previous button clicked for ${type}, currentPage: ${currentPage}`); // Debug log
        if (currentPage > 1) {
            currentPage--;
            updatePagination();
        } else {
            console.log(`Previous button disabled for ${type}, already on page 1`); // Debug log
        }
    });

    newNextBtn.addEventListener('click', function () {
        console.log(`Next button clicked for ${type}, currentPage: ${currentPage}`); // Debug log
        if (currentPage < totalPages) {
            currentPage++;
            updatePagination();
        } else {
            console.log(`Next button disabled for ${type}, already on page ${totalPages}`); // Debug log
        }
    });

    // Initialize pagination
    updatePagination();
}

    // Initialize pagination for all transaction types
    ['all', 'credit', 'debit'].forEach(type => setupPagination(type));

    // Add Money to Wallet
    const addMoneyBtn = document.getElementById('addMoneyBtn');
    const walletAmountInput = document.getElementById('walletAmount');
    const walletMessage = document.getElementById('walletMessage');

    if (addMoneyBtn) {
        addMoneyBtn.addEventListener('click', async function () {
            console.log('Add Money button clicked'); // Debug log
            const amount = parseFloat(walletAmountInput.value);

            if (isNaN(amount) || amount <= 0) {
                walletMessage.textContent = 'Please enter a valid amount.';
                walletMessage.style.color = 'red';
                return;
            }

            try {
                const response = await fetch('/add-money-to-wallet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount })
                });

                const data = await response.json();

                if (data.success) {
                    walletMessage.textContent = data.message;
                    walletMessage.style.color = 'green';
                    document.querySelector('.wallet-balance').textContent = `₹${data.walletBalance.toFixed(2)}`;
                    walletAmountInput.value = '';
                } else {
                    walletMessage.textContent = data.message || 'Failed to add money to wallet.';
                    walletMessage.style.color = 'red';
                }
            } catch (error) {
                console.error('Error adding money to wallet:', error);
                walletMessage.textContent = 'An error occurred. Please try again.';
                walletMessage.style.color = 'red';
            }
        });
    }

    // Modal functionality
    const modals = document.querySelectorAll('.modal');
    const closeButtons = document.querySelectorAll('.close-btn');

    closeButtons.forEach(button => {
        button.addEventListener('click', function () {
            this.closest('.modal').classList.remove('active');
        });
    });

    window.addEventListener('click', function (event) {
        modals.forEach(modal => {
            if (event.target === modal) modal.classList.remove('active');
        });
    });

    // Copy referral link
    document.querySelector('.copy-btn').addEventListener('click', function () {
        const referralLink = document.querySelector('.referral-link').textContent;
        navigator.clipboard.writeText(referralLink).then(() => {
            Swal.fire({
                icon: 'success',
                title: 'Copied!',
                text: 'Referral link copied to clipboard.',
                timer: 1500,
                showConfirmButton: false
            });
        }).catch(() => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to copy link.'
            });
        });
    });

    // Personal Information Modal
    const editPersonalInfoBtn = document.getElementById('editPersonalInfo');
    const personalInfoModal = document.getElementById('personalInfoModal');
    const personalInfoForm = document.getElementById('personalInfoForm');

    if (editPersonalInfoBtn) {
        editPersonalInfoBtn.addEventListener('click', () => personalInfoModal.classList.add('active'));
    }

    if (personalInfoForm) {
        personalInfoForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = {
                fullName: document.getElementById('fullName').value,
                phone: document.getElementById('phone').value
            };

           

            try {
                const response = await fetch('/update-profile', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Profile updated successfully!'
                    }).then(() => {
                        personalInfoModal.classList.remove('active');
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update profile.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                });
            }
        });
    }

    // Profile Picture Modal
    const profilePicForm = document.getElementById('profilePicForm');
    const profilePicInput = document.getElementById('profilePicInput');
    const profilePicPreview = document.getElementById('profilePicPreview');
    const profilePicModal = document.getElementById('profilePicModal');
    const changeProfilePicBtn = document.getElementById('personalInfoChangeProfilePic');
    const closeProfilePicModalBtn = profilePicModal.querySelector('.close-btn');
    const removeProfilePicBtn = document.getElementById('removeProfilePicBtn');

    if (profilePicInput) {
        profilePicInput.addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePicPreview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }

    if (profilePicForm) {
        profilePicForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = new FormData();
            if (profilePicInput.files.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please select an image.'
                });
                return;
            }
            formData.append('profilePic', profilePicInput.files[0]);

            try {
                const response = await fetch('/user/upload-profile-pic', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Profile picture updated successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update profile picture.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                });
            }
        });
    }

    if (changeProfilePicBtn) {
        changeProfilePicBtn.addEventListener('click', () => profilePicModal.classList.add('active'));
    }

    if (closeProfilePicModalBtn) {
        closeProfilePicModalBtn.addEventListener('click', () => profilePicModal.classList.remove('active'));
    }

    if (profilePicModal) {
        profilePicModal.addEventListener('click', (event) => {
            if (event.target === profilePicModal) {
                profilePicModal.classList.remove('active');
            }
        });
    }

    if (removeProfilePicBtn) {
        removeProfilePicBtn.addEventListener('click', async function () {
            const confirmation = await Swal.fire({
                title: 'Are you sure?',
                text: 'This will remove your profile picture.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            });

            if (confirmation.isConfirmed) {
                try {
                    const response = await fetch('/user/remove-profile-pic', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Removed!',
                            text: 'Your profile picture has been removed.',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            profilePicPreview.src = 'https://via.placeholder.com/150';
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to remove profile picture.'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred. Please try again.'
                    });
                }
            }
        });
    }

    // Edit Address Modal
    const editAddressModal = document.getElementById('editAddressModal');
    const editAddressForm = document.getElementById('editAddressForm');

    window.openEditAddressModal = function (id, type, name, city, landmark, state, pincode, phone, altPhone) {
        document.getElementById('editAddressId').value = id;
        document.getElementById('editAddressType').value = type;
        document.getElementById('editName').value = name;
        document.getElementById('editCity').value = city;
        document.getElementById('editLandmark').value = landmark;
        document.getElementById('editState').value = state;
        document.getElementById('editPincode').value = pincode;
        document.getElementById('editPhone').value = phone;
        document.getElementById('editAltPhone').value = altPhone || '';
        editAddressModal.classList.add('active');
    };

    if (editAddressForm) {
        editAddressForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = {
                addressId: document.getElementById('editAddressId').value,
                addressType: document.getElementById('editAddressType').value,
                name: document.getElementById('editName').value,
                city: document.getElementById('editCity').value,
                landmark: document.getElementById('landmark').value,
                state: document.getElementById('editState').value,
                pincode: document.getElementById('editPincode').value,
                phone: document.getElementById('editPhone').value,
                altPhone: document.getElementById('editAltPhone').value
            };

            try {
                const response = await fetch('/update-address', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Address updated successfully!'
                    }).then(() => {
                        editAddressModal.classList.remove('active');
                        showSection('profile-address-section');
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update address.'
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                });
            }
        });
    }
});
        </script>
    </body>
    </html>