<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Change Password</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f7f9fc;
    }
    
    h1 {
      color: #2c3e50;
      margin-bottom: 10px;
    }
    
    .subtitle {
      color: #7f8c8d;
      margin-top: 0;
      margin-bottom: 30px;
    }
    
    .container {
      background-color: #fff;
      border-radius: 8px;
      padding: 25px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .info-box {
      background-color: #f1f8ff;
      border-radius: 6px;
      padding: 15px;
      margin-bottom: 25px;
      border-left: 4px solid #3498db;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #2c3e50;
    }
    
    input[type="password"] {
      width: 100%;
      padding: 12px;
      font-size: 16px;
      border: 2px solid #ddd;
      border-radius: 6px;
      box-sizing: border-box;
      background-color: #f9f9f9;
    }
    
    input[type="password"]:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
      background-color: #fff;
    }
    
    button {
      background-color: #3498db;
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 6px;
      font-size: 16px;
      font-weight: 500;
      width: 100%;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    button:hover {
      background-color: #2980b9;
    }
    
    .message {
      margin-top: 20px;
      padding: 12px;
      border-radius: 6px;
      font-size: 14px;
      display: none;
    }
    
    .success {
      background-color: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }
    
    .error {
      background-color: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }
    
    .password-wrapper {
      position: relative;
    }
    
    .toggle-password {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      border: none;
      background: transparent;
      cursor: pointer;
      color: #7f8c8d;
      width: auto;
      padding: 0;
      font-size: 14px;
    }
    
    .password-requirements {
      margin-top: 8px;
      font-size: 13px;
      color: #7f8c8d;
    }
    
    .requirement {
      margin-bottom: 3px;
      display: flex;
      align-items: center;
    }
    
    .requirement.valid {
      color: #28a745;
    }
    
    .requirement.invalid {
      color: #dc3545;
    }
    
    .requirement-icon {
      display: inline-block;
      width: 16px;
      height: 16px;
      margin-right: 6px;
      border-radius: 50%;
      text-align: center;
      line-height: 16px;
      font-size: 10px;
      font-weight: bold;
    }
    
    .valid .requirement-icon {
      background-color: #28a745;
      color: white;
    }
    
    .invalid .requirement-icon {
      background-color: #dc3545;
      color: white;
    }
    
    .back-link {
      display: block;
      text-align: center;
      margin-top: 20px;
      color: #7f8c8d;
      text-decoration: none;
      font-size: 14px;
    }
    
    .back-link:hover {
      color: #3498db;
      text-decoration: underline;
    }
  </style>
</head>

<body>
  <h1>Set New Password</h1>
  <p class="subtitle">Create a strong password for your account</p>
  
  <div class="container">
    <div class="info-box">
      <p>Your new password must be different from previous passwords and meet the security requirements below.</p>
    </div>

    <% if (typeof message !== 'undefined' && message) { %>
        <script>
          document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
              title: 'Notice',
              text: '<%= message %>',
              icon: 'info',
              confirmButtonColor: '#4F46E5'
            });
          });
        </script>
    <% } %>
    
    <form id="passwordForm" action="/update-password" method="post">
      <input type="hidden" id="emailInput" name="email" value="<%= user.email %>">
      <div class="form-group">
        <label for="newPassword">New Password</label>
        <div class="password-wrapper">
          <input 
            type="password" 
            id="newPassword" 
            name="newPassword" 
            placeholder="Enter your new password" 
            required
            autocomplete="new-password"
          >
          <button type="button" class="toggle-password" id="toggleNewPassword">Show</button>
        </div>
        <div class="password-requirements">
          <div class="requirement" id="length">
            <span class="requirement-icon">✓</span>
            At least 8 characters
          </div>
          <div class="requirement" id="uppercase">
            <span class="requirement-icon">✓</span>
            At least one uppercase letter
          </div>
          <div class="requirement" id="lowercase">
            <span class="requirement-icon">✓</span>
            At least one lowercase letter
          </div>
          <div class="requirement" id="number">
            <span class="requirement-icon">✓</span>
            At least one number
          </div>
          <div class="requirement" id="special">
            <span class="requirement-icon">✓</span>
            At least one special character
          </div>
        </div>
      </div>
      
      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <div class="password-wrapper">
          <input 
            type="password" 
            id="confirmPassword" 
            name="confirmPassword" 
            placeholder="Confirm your new password" 
            required
            autocomplete="new-password"
          >
          <button type="button" class="toggle-password" id="toggleConfirmPassword">Show</button>
        </div>
      </div>
      
      <button type="submit" id="submitButton">Update Password</button>
    </form>
    
    <a href="/login" class="back-link">← Back to Login</a>
  </div>

  <script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('passwordForm');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const submitButton = document.getElementById('submitButton');
    
    // Toggle password visibility
    document.getElementById('toggleNewPassword').addEventListener('click', function() {
      const type = newPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      newPasswordInput.setAttribute('type', type);
      this.textContent = type === 'password' ? 'Show' : 'Hide';
    });
    
    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
      const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      confirmPasswordInput.setAttribute('type', type);
      this.textContent = type === 'password' ? 'Show' : 'Hide';
    });
    
    // Password requirements validation
    const requirements = {
      length: { regex: /.{8,}/, element: document.getElementById('length') },
      uppercase: { regex: /[A-Z]/, element: document.getElementById('uppercase') },
      lowercase: { regex: /[a-z]/, element: document.getElementById('lowercase') },
      number: { regex: /[0-9]/, element: document.getElementById('number') },
      special: { regex: /[^A-Za-z0-9]/, element: document.getElementById('special') }
    };
    
    function validatePassword() {
      const password = newPasswordInput.value;
      let isValid = true;
      
      for (const [key, requirement] of Object.entries(requirements)) {
        const valid = requirement.regex.test(password);
        requirement.element.className = valid ? 'requirement valid' : 'requirement invalid';
        requirement.element.querySelector('.requirement-icon').textContent = valid ? '✓' : '✗';
        
        if (!valid) {
          isValid = false;
        }
      }
      
      return isValid;
    }
    
    function validateConfirmPassword() {
      return newPasswordInput.value === confirmPasswordInput.value;
    }
    
    newPasswordInput.addEventListener('input', validatePassword);
    
    // Form validation and submission
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (!validatePassword()) {
        showErrorMessage('Your password does not meet all the requirements.');
        return;
      }
      
      if (!validateConfirmPassword()) {
        showErrorMessage('The passwords do not match.');
        return;
      }
      
      // Show loading state
      submitButton.disabled = true;
      submitButton.textContent = 'Updating...';
      
      // Get form data
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      // Send request to server
      fetch('/update-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(data => {
        submitButton.disabled = false;
        submitButton.textContent = 'Update Password';
        
        if (data.success) {
          showSuccessMessage();
        } else {
          showErrorMessage(data.message || 'There was a problem updating your password.');
        }
      })
      .catch(err => {
        submitButton.disabled = false;
        submitButton.textContent = 'Update Password';
        showErrorMessage('A network error occurred. Please try again later.');
      });
    });
    
    // Replace success message display with SweetAlert
    function showSuccessMessage() {
      Swal.fire({
        title: 'Success!',
        text: 'Password updated successfully! You will be redirected to login in a few seconds.',
        icon: 'success',
        confirmButtonColor: '#4F46E5'
      }).then(() => {
        window.location.href = '/login';
      });
    }
    
    // Replace error message display with SweetAlert
    function showErrorMessage(message) {
      Swal.fire({
        title: 'Error',
        text: message || 'There was a problem updating your password. Please try again.',
        icon: 'error',
        confirmButtonColor: '#4F46E5'
      });
    }
    
    // Live password match validation
    confirmPasswordInput.addEventListener('input', function() {
      if (this.value && !validateConfirmPassword()) {
        this.style.borderColor = '#dc3545';
      } else {
        this.style.borderColor = newPasswordInput.value === this.value ? '#28a745' : '#ddd';
      }
    });
  });
  </script>
</body>
</html>