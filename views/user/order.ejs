<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Orders</title>
  <%- include("../../views/partials/user/header") %>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Unbounded:wght@500&family=Nunito:wght@400;600&display=swap" rel="stylesheet">
  
  <style>
    /* Update root variables to match home page */
    :root {
      /* Colors */
      --color-primary: #262729;
      --color-primary-light: #636566;
      --color-primary-dark: #1a1a1a;
      --color-background: #f8fafc;
      --color-card: #FFFFFF;
      --color-text: #333333;
      --color-text-light: #666666;
      --color-text-lighter: #999999;
      --color-border: #e2e8f0;
      --color-border-light: #F1F2F4;
      --color-status-delivered: #2E7D32;
      --color-status-shipped: #FF8C00;
      --color-status-processing: #777777;
      --color-shadow: rgba(0, 0, 0, 0.08);
      
      /* Spacing */
      --space-1: 0.25rem;
      --space-2: 0.5rem;
      --space-3: 1rem;
      --space-4: 1.5rem;
      --space-5: 2rem;
      --space-6: 3rem;
      
      /* Typography */
      --font-family: 'Poppins', sans-serif;
      --font-size-xs: 0.75rem;
      --font-size-sm: 0.875rem;
      --font-size-md: 1rem;
      --font-size-lg: 1.125rem;
      --font-size-xl: 1.25rem;
      --font-size-2xl: 1.5rem;
      
      /* Layout */
      --header-height: 4rem;
      --container-width: 1200px;
      --radius-md: 0.5rem;
      --radius-lg: 0.75rem;
      --shadow-sm: 0 1px 2px var(--color-shadow);
      --shadow-md: 0 2px 8px var(--color-shadow);
      --transition-fast: 0.15s ease;
      --transition-normal: 0.25s ease;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f8fafc;
      color: #334155;
      line-height: 1.5;
      min-height: 100vh;
    }

    .container {
      max-width: var(--container-width);
      margin: 0 auto;
      padding: 40px 20px;
    }

    .header-content {
      display: flex;
      align-items: center;
      justify-content: space-between;
      height: 100%;
      padding: var(--space-3) 0;
    }

    .navigation {
      display: flex;
      gap: var(--space-4);
    }

    .nav-button {
      position: relative;
      padding: var(--space-2) var(--space-3);
      color: var(--color-text-light);
      font-weight: 500;
      border: none;
      background: none;
      cursor: pointer;
      font-size: var(--font-size-md);
    }

    .nav-button.active {
      color: var(--color-primary);
    }

    .nav-button.active::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 50%;
      transform: translateX(-50%);
      width: 24px;
      height: 3px;
      background-color: var(--color-primary);
      border-radius: 1.5px;
    }

    .search-section {
      width: 100%;
      margin-bottom: 30px;
    }

    .search-container {
      position: relative;
      max-width: 400px;
      margin-left: auto;
      transition: all 0.3s ease;
    }

    .search-container:focus-within {
      box-shadow: 0 0 0 3px rgba(99, 100, 102, 0.1);
      transform: none;
    }

    .search-container input {
      width: 100%;
      padding: 14px 45px 14px 20px;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      font-size: 14px;
      transition: all 0.3s ease;
      background-color: #fff;
      font-family: 'Poppins', sans-serif;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .search-container input:focus {
      border-color: #64748b;
      outline: none;
      box-shadow: 0 0 0 3px rgba(99, 100, 102, 0.15);
    }

    .search-container::before {
      content: "üîç";
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: #94a3b8;
      font-size: 16px;
      pointer-events: none;
    }

    .search-clear {
      position: absolute;
      right: 45px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #94a3b8;
      font-size: 18px;
      cursor: pointer;
      opacity: 0.7;
      transition: all 0.2s ease;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
    }

    .search-clear:hover {
      opacity: 1;
      background-color: #f1f5f9;
    }

    .main {
      padding: var(--space-3) 0 var(--space-6);
    }

    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 40px;
      position: relative;
      padding-bottom: 15px;
      border-bottom: 2px solid #e2e8f0;
    }

    .page-header h1 {
      font-family: 'Unbounded', cursive;
      font-size: 2.2rem;
      color: #111827;
      position: relative;
      display: inline-block;
      margin-bottom: 5px;
    }

    .page-header h1::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 0;
      width: 70px;
      height: 4px;
      background: linear-gradient(90deg, #636566 0%, #262729 100%);
      border-radius: 2px;
    }

    .filter-controls {
      display: flex;
      gap: 12px;
      align-items: center;
    }

    .filter-select {
      padding: 12px 18px;
      border: 1px solid #e2e8f0;
      border-radius: 10px;
      font-size: 14px;
      color: #475569;
      background-color: #fff;
      cursor: pointer;
      transition: all 0.2s ease;
      font-family: 'Poppins', sans-serif;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23718096' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 15px center;
      padding-right: 40px;
    }

    .filter-select:hover {
      border-color: #cbd5e1;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
    }

    .filter-select:focus {
      outline: none;
      border-color: #64748b;
      box-shadow: 0 0 0 3px rgba(99, 100, 102, 0.15);
    }

    .orders-section {
      margin-bottom: 50px;
    }

    .time-period h2 {
      font-family: 'Unbounded', cursive;
      font-size: 1.5rem;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 25px;
      padding-bottom: 12px;
      border-bottom: 1px solid #e2e8f0;
      position: relative;
    }

    .time-period h2::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 50px;
      height: 3px;
      background: linear-gradient(90deg, #636566 0%, #262729 100%);
      border-radius: 1.5px;
    }

    .orders-list {
      display: grid;
      grid-template-columns: 1fr;
      gap: 25px;
    }

    .order-card {
      background-color: #fff;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
      animation: fadeInUp 0.5s ease-out forwards;
      opacity: 0;
      transform: none;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: none;
      }
      to {
        opacity: 1;
        transform: none;
      }
    }

    .order-card:nth-child(1) { animation-delay: 0.1s; }
    .order-card:nth-child(2) { animation-delay: 0.2s; }
    .order-card:nth-child(3) { animation-delay: 0.3s; }
    .order-card:nth-child(4) { animation-delay: 0.4s; }
    .order-card:nth-child(5) { animation-delay: 0.5s; }
    .order-card:nth-child(6) { animation-delay: 0.6s; }

    .order-card:hover {
      transform: none;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 18px 20px;
      border-bottom: 1px solid #f1f5f9;
      background: linear-gradient(to right, #f9fafb, #ffffff);
    }

    .order-date {
      color: #64748b;
      font-size: 14px;
      font-weight: 500;
    }

    .order-number {
      font-weight: 600;
      color: #334155;
      font-size: 14px;
      padding: 5px 12px;
      background-color: #f1f5f9;
      border-radius: 20px;
      border: 1px solid #e2e8f0;
    }

    .order-body {
      padding: 20px;
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .order-image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      transition: transform 0.3s ease;
    }

    .product-item {
      display: flex;
      align-items: center;
      padding: 15px;
      border-radius: 12px;
      background-color: #f8fafc;
      transition: all 0.3s ease;
      border: 1px solid #edf2f7;
      margin-bottom: 15px;
    }

    .product-item:last-child {
      margin-bottom: 0;
    }

    .product-item:hover {
      background-color: #f1f5f9;
      transform: none;
    }

    .additional-product {
      margin-top: 10px;
      opacity: 0.85;
    }

    .product-image-container {
      width: 70px;
      height: 70px;
      flex-shrink: 0;
      margin-right: 15px;
      transition: all 0.3s ease;
      border-radius: 10px;
      overflow: hidden;
      background-color: white;
      border: 1px solid #edf2f7;
    }

    .order-image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      transition: transform 0.3s ease;
    }

    .product-item:hover .order-image {
      transform: none;
    }

    .product-details {
      flex: 1;
    }

    .product-name {
      font-weight: 600;
      color: #334155;
      font-size: 15px;
      margin-bottom: 6px;
      line-height: 1.4;
    }

    .product-price {
      color: #64748b;
      font-size: 14px;
      font-weight: 500;
    }

    .order-meta {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
      margin: 20px 0;
    }

    .order-meta-item {
      display: flex;
      flex-direction: column;
      padding: 15px;
      border-radius: 10px;
      background-color: #f8fafc;
      transition: all 0.3s ease;
      border: 1px solid #edf2f7;
    }

    .order-meta-item:hover {
      background-color: #f1f5f9;
      transform: none;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .order-meta-label {
      font-size: 12px;
      color: #94a3b8;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 6px;
    }

    .order-meta-value {
      font-size: 14px;
      font-weight: 600;
      color: #1e293b;
    }

    .order-address-summary {
      grid-column: span 2;
    }

    .order-status {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 5px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .order-status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }

    .order-status.delivered {
      background-color: rgba(16, 185, 129, 0.1);
      color: #10b981;
    }

    .order-status.cancelled {
    background-color: rgba(239, 68, 68, 0.1);
    color: #ef4444;
}

.order-status.cancelled .order-status-dot {
    background-color: #ef4444;
}

.order-status.pending {
    background-color: rgba(234, 179, 8, 0.1);
    color: #eab308;
}
.order-status.pending .order-status-dot {
    background-color: #eab308;
}

    .order-status.delivered .order-status-dot {
      background-color: #10b981;
    }

    .order-status.shipped {
      background-color: rgba(249, 115, 22, 0.1);
      color: #f97316;
    }

    .order-status.shipped .order-status-dot {
      background-color: #f97316;
    }

    .order-status.processing {
      background-color: rgba(99, 102, 241, 0.1);
      color: #6366f1;
    }

    .order-status.processing .order-status-dot {
      background-color: #6366f1;
    }

    .order-actions {
      display: flex;
      gap: 12px;
      margin-top: auto;
      padding-top: 20px;
      flex-wrap: wrap;
    }

    .order-btn {
      padding: 12px 18px;
      border-radius: 10px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      letter-spacing: 0.01em;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      flex: 1;
      min-width: 120px;
    }

    .order-btn-primary {
      background: linear-gradient(90deg, #636566 0%, #262729 100%);
      color: white;
    }

    .order-btn-primary:hover {
      opacity: 0.95;
      transform: none;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .order-btn-secondary {
      background-color: white;
      color: #475569;
      border: 1px solid #cbd5e1;
    }

    .order-btn-secondary:hover {
      background-color: #e2e8f0;
      color: #1e293b;
      transform: none;
    }

    .order-btn-danger {
      background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);
      color: white;
    }

    .order-btn-danger:hover {
      opacity: 0.95;
      transform: none;
      box-shadow: 0 2px 5px rgba(220, 38, 38, 0.1);
    }

    .no-orders {
      background-color: white;
      border-radius: 16px;
      padding: 70px 40px;
      text-align: center;
      box-shadow: 0 5px 20px rgba(0,0,0,0.05);
      border: 1px solid #edf2f7;
      width: 100%;
      margin: 40px 0;
      animation: fadeIn 0.5s ease forwards;
    }

    .no-orders p {
      color: #64748b;
      margin-bottom: 30px;
      font-size: 16px;
      line-height: 1.6;
    }

    .continue-shopping-link {
      display: inline-block;

      background: linear-gradient(90deg, #636566 0%, #262729 100%);
      color: white;
      padding: 14px 28px;
      border-radius: 10px;
      text-decoration: none;
      font-weight: 600;
      font-size: 15px;
      transition: all 0.3s;
      border: none;
      cursor: pointer;
    }

    .continue-shopping-link:hover {
      opacity: 0.95;
      transform: none;
      box-shadow: 0 3px 8px rgba(38, 39, 41, 0.15);
      color: white;
      text-decoration: none;
    }

    @media (max-width: 768px) {
      .page-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
      }
      
      .filter-controls {
        width: 100%;
        overflow-x: auto;
        padding-bottom: 10px;
      }
      
      .filter-select {
        min-width: 150px;
      }
      
      .search-container {
        max-width: 100%;
        margin-top: 15px;
      }
      
      .orders-list {
        grid-template-columns: 1fr;
        gap: 20px;
      }
      
      .order-meta {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .order-actions {
        flex-direction: row;
      }
      
      .order-btn {
        width: auto;
        flex: 1;
      }
      
      .order-card {
        margin: 0;
      }
    }

    @media (max-width: 480px) {
      .order-meta {
        grid-template-columns: 1fr;
      }
      
      .order-address-summary {
        grid-column: span 1;
      }
      
      .order-actions {
        flex-direction: column;
      }
      
      .order-btn {
        width: 100%;
      }
      
      .page-header h1 {
        font-size: 1.8rem;
      }
      
      .time-period h2 {
        font-size: 1.3rem;
      }
    }

    /* Fix modal scrolling issue */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(4px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      overflow-y: auto; /* Enable vertical scrolling on the backdrop */
      padding: 20px;
    }

    .modal-backdrop.active {
      opacity: 1;
      visibility: visible;
    }

    .order-modal {
      background-color: white;
      border-radius: 16px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      display: flex;
      flex-direction: column;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      transform: translateY(30px) scale(0.95);
      transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      margin: auto; /* Center the modal */
      position: relative; /* Required for children positioning */
    }

    .modal-backdrop.active .order-modal {
      transform: translateY(0) scale(1);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 25px 30px;
      border-bottom: 1px solid #edf2f7;
      position: sticky;
      top: 0;
      background-color: white;
      z-index: 10;
      border-top-left-radius: 16px;
      border-top-right-radius: 16px;
    }

    .modal-body {
      padding: 30px;
      overflow-y: auto; /* Enable scrolling for modal content */
      flex: 1;
      max-height: calc(90vh - 140px); /* Account for header and footer height */
    }

    .modal-footer {
      padding: 20px 30px;
      border-top: 1px solid #edf2f7;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      bottom: 0;
      background-color: white;
      z-index: 10;
      border-bottom-left-radius: 16px;
      border-bottom-right-radius: 16px;
    }

    /* Fix return modal scrolling as well */
    .modal {
      display: none;
      position: fixed;
      z-index: 1100;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow-y: auto; /* Enable scrolling */
      background-color: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(4px);
      padding: 20px;
    }

    .modal-content {
      background-color: white;
      margin: 5vh auto;
      padding: 35px;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      width: 90%;
      max-width: 500px;
      position: relative;
      animation: modalFadeIn 0.3s ease-out forwards;
    }

    /* Media query for smaller screens */
    @media (max-height: 700px) {
      .order-modal {
        max-height: 95vh;
      }
      
      .modal-body {
        max-height: calc(95vh - 140px);
      }
      
      .modal-content {
        margin: 2vh auto;
        max-height: 90vh;
        overflow-y: auto;
      }
    }

    /* Fix some specific elements for scrolling */
    .order-products-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 25px;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }

    /* Make sure the entire content is visible in the modal */
    .order-detail-container {
      display: flex;
      flex-direction: column;
      gap: 25px;
    }

    .modal-title {
      font-family: 'Unbounded', cursive;
      font-size: 24px;
      font-weight: 600;
      color: #1a1a1a;
    }

    .modal-close {
      background: #f8fafc;
      border: 1px solid #edf2f7;
      cursor: pointer;
      font-size: 22px;
      color: #64748b;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    .modal-close:hover {
      background-color: #f1f5f9;
      color: #1a1a1a;
      transform: rotate(90deg);
    }

    .section-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 15px;
      color: var(--color-text);
      padding-bottom: 12px;
      border-bottom: 1px solid var(--color-border-light);
    }

    .order-products-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 25px;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .product-table-header {
      text-align: left;
      padding: 15px;
      background-color: #f8fafc;
      color: #64748b;
      font-size: 14px;
      font-weight: 600;
      border-bottom: 1px solid #edf2f7;
    }

    .product-table-row {
      border-bottom: 1px solid #edf2f7;
      transition: background-color 0.2s ease;
    }

    .product-table-row:hover {
      background-color: #f8fafc;
    }

    .product-table-row:last-child {
      border-bottom: none;
    }

    .product-table-cell {
      padding: 15px;
      vertical-align: middle;
    }

    .product-table-image {
      width: 70px;
      height: 70px;
      object-fit: contain;
      border-radius: 8px;
      background-color: white;
      border: 1px solid #edf2f7;
      transition: transform 0.2s ease;
    }

    .product-table-row:hover .product-table-image {
      transform: none;
    }

    .price-breakdown {
      margin-top: 25px;
      background-color: #f8fafc;
      padding: 20px;
      border-radius: 10px;
    }

    .price-row {
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      font-size: 16px;
    }

    .price-row:not(:last-child) {
      border-bottom: 1px dashed #e2e8f0;
    }

    .total-row {
      margin-top: 10px;
      padding-top: 10px;
      border-top: 2px solid #e2e8f0;
      font-weight: 600;
      font-size: 18px;
    }

    .modal-action {
      padding: 12px 25px;
      border-radius: 25px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
    }

    .modal-primary {
      background: linear-gradient(90deg, #636566 0%, #262729 100%);
      color: white;
    }

    .modal-primary:hover {
      opacity: 0.9;
      transform: none;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .modal-secondary {
      background-color: #f1f5f9;
      color: #64748b;
      border: 1px solid #e2e8f0;
    }

    .modal-secondary:hover {
      background-color: #e2e8f0;
      color: #1e293b;
      transform: none;
    }

    .close-modal {
      position: absolute;
      right: 20px;
      top: 20px;
      font-size: 24px;
      color: #94a3b8;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background-color: #f8fafc;
    }

    .close-modal:hover {
      color: #1e293b;
      background-color: #f1f5f9;
      transform: rotate(90deg);
    }

    .modal h2 {
      margin-bottom: 20px;
      color: #1e293b;
      font-family: 'Unbounded', cursive;
      font-size: 24px;
    }

    .return-policy-info {
      background-color: #f8fafc;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 25px;
      border-left: 4px solid #0066CC;
    }

    .return-policy-info h4 {
      margin-top: 0;
      margin-bottom: 12px;
      color: #0066CC;
      font-weight: 600;
      font-size: 16px;
    }

    .return-policy-info ul {
      margin: 0;
      padding-left: 20px;
    }

    .return-policy-info li {
      margin-bottom: 8px;
      color: #475569;
      font-size: 14px;
    }

    .modal p {
      margin-bottom: 20px;
      color: #475569;
      line-height: 1.6;
      font-size: 15px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #334155;
      font-size: 14px;
    }

    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 14px 15px;
      border: 1px solid #cbd5e1;
      border-radius: 8px;
      font-size: 14px;
      color: #1e293b;
      transition: all 0.2s ease;
    }

    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #64748b;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .form-group select {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 15px center;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      padding-right: 40px;
    }

    .form-group textarea {
      resize: vertical;
      min-height: 120px;
    }

    .modal-actions {
      display: flex;
      justify-content: flex-end;
      gap: 15px;
      margin-top: 30px;
    }

    .modal-btn {
      padding: 12px 24px;
      border-radius: 25px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .modal-btn-cancel {
      background-color: #f1f5f9;
      color: #475569;
      border: 1px solid #cbd5e1;
    }

    .modal-btn-cancel:hover {
      background-color: #e2e8f0;
      color: #334155;
      transform: none;
    }

    .modal-btn-confirm {
      background: linear-gradient(90deg, #e53e3e 0%, #c53030 100%);
      color: white;
      border: none;
    }

    .modal-btn-confirm:hover {
      opacity: 0.95;
      transform: none;
      box-shadow: 0 2px 5px rgba(229, 62, 62, 0.1);
    }

    .alert {
      padding: var(--space-3);
      border-radius: var(--radius-md);
      margin-bottom: var(--space-4);
    }

    .alert-success {
      background-color: rgba(46, 125, 50, 0.1);
      color: #2E7D32;
      border-left: 4px solid #2E7D32;
    }

    .return-rejected-badge {
      display: inline-block;
      font-size: 11px;
      background-color: #ef4444;
      color: white;
      padding: 3px 8px;
      border-radius: 20px;
      margin-left: 6px;
      vertical-align: middle;
      font-weight: 600;
      letter-spacing: 0.03em;
    }

    .return-rejection-notice {
      display: flex;
      gap: 12px;
      background-color: #fef1f1;
      border-left: 4px solid #e74c3c;
      padding: 12px;
      margin-bottom: 20px;
      border-radius: 4px;
    }
    
    .return-rejection-icon {
      font-size: 24px;
    }
    
    .return-rejection-message h4 {
      color: #e74c3c;
      margin-top: 0;
      margin-bottom: 8px;
    }
    
    .return-rejection-message p {
      margin: 0 0 8px;
    }
    
    .return-rejection-message p:last-child {
      margin-bottom: 0;
    }

    .inline-return-rejection {
      background-color: #fef2f2;
      border-left: 3px solid #ef4444;
      padding: 15px;
      margin-top: 15px;
      font-size: 13px;
      color: #b91c1c;
      width: 100%;
      border-radius: 8px;
      line-height: 1.5;
      box-shadow: 0 2px 5px rgba(239, 68, 68, 0.1);
    }
    
    .inline-return-message {
      background-color: #fffbeb;
      border-left: 3px solid #f59e0b;
      padding: 15px;
      margin-top: 15px;
      font-size: 13px;
      color: #92400e;
      width: 100%;
      border-radius: 8px;
      line-height: 1.5;
      box-shadow: 0 2px 5px rgba(245, 158, 11, 0.1);
    }

    .inline-return-rejection strong,
    .inline-return-message strong {
      font-weight: 600;
      display: block;
      margin-bottom: 5px;
      font-size: 14px;
    }

    /* Additional styles to match the home page */
    .time-period h2 {
      font-family: 'Unbounded', cursive;
      font-size: 24px;
      margin-bottom: var(--space-4);
      color: var(--color-text);
      font-weight: 600;
      position: relative;
      padding-bottom: 15px;
      border-bottom: 2px solid #e2e8f0;
    }

    .product-image-container {
      width: 70px;
      height: 70px;
      flex-shrink: 0;
      margin-right: var(--space-3);
      transition: all 0.3s ease;
      border-radius: 8px;
      overflow: hidden;
      background-color: white;
    }

    .order-status {
      display: inline-flex;
      align-items: center;
      gap: var(--space-1);
      padding: var(--space-1) var(--space-2);
      border-radius: 25px;
      font-size: var(--font-size-xs);
      font-weight: 500;
      text-transform: uppercase;
    }

    .container {
      max-width: var(--container-width);
      margin: 0 auto;
      padding: 40px 20px;
    }

    .no-orders {
      background-color: var(--color-card);
      border-radius: var(--radius-lg);
      padding: var(--space-5);
      text-align: center;
      box-shadow: var(--shadow-sm);
      border: 1px solid var(--color-border);
    }

    .no-orders p {
      color: var(--color-text-light);
      margin-bottom: var(--space-3);
      font-size: var(--font-size-md);
      font-family: 'Poppins', sans-serif;
    }

    /* Animation for cards */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Fix product-item additional styles */
    .product-item {
      background-color: #ffffff;
      border: 1px solid var(--color-border);
      border-radius: 10px;
      overflow: hidden;
      transition: transform 0.3s ease;
    }

    .order-actions {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }

    /* Modal styling improvements */
    .modal-backdrop.active .order-modal {
      transform: translateY(0);
      border-radius: 12px;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--space-4);
      border-bottom: 1px solid var(--color-border-light);
      position: sticky;
      top: 0;
      background-color: var(--color-card);
      z-index: 10;
    }

    .modal-title {
      font-family: 'Unbounded', cursive;
      font-size: var(--font-size-xl);
      font-weight: 600;
      color: var(--color-text);
    }

    /* Add styles for address section */
    .shipping-info {
      display: flex;
      flex-direction: column;
      gap: 10px;
      padding: 20px;
      background-color: #f8fafc;
      border-radius: 10px;
      margin-bottom: 20px;
      border: 1px solid #edf2f7;
      box-shadow: 0 2px 6px rgba(0,0,0,0.03);
    }

    .address-name {
      font-weight: 600;
      font-size: 16px;
      color: #1e293b;
      margin-bottom: 5px;
    }

    .address-line {
      color: #64748b;
      line-height: 1.5;
    }

    .address-badge {
      display: inline-block;
      padding: 4px 12px;
      background-color: #f1f5f9;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      color: #64748b;
      margin-top: 8px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .address-phone {
      color: #64748b;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .address-phone:before {
      content: 'üì±';
      font-size: 14px;
    }

    .address-placeholder {
      color: #94a3b8;
      font-style: italic;
      padding: 15px 0;
      text-align: center;
    }

    .shipping-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    .shipping-title {
      font-size: 18px;
      font-weight: 600;
      color: #1e293b;
    }

    .order-summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }

    .summary-item {
      display: flex;
      flex-direction: column;
      background-color: #f8fafc;
      padding: 15px;
      border-radius: 8px;
      border: 1px solid #edf2f7;
      transition: all 0.2s ease;
    }

    .summary-item:hover {
      background-color: #f1f5f9;
      transform: none;
    }

    .summary-label {
      font-size: 12px;
      color: #94a3b8;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 5px;
    }

    .summary-value {
      font-size: 16px;
      color: #334155;
      font-weight: 500;
    }

    .order-status-large {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 5px 12px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .order-status-large.delivered {
      background-color: rgba(46, 125, 50, 0.1);
      color: var(--color-status-delivered);
    }

    .order-status-large.shipped {
      background-color: rgba(255, 140, 0, 0.1);
      color: var(--color-status-shipped);
    }

    .order-status-large.processing {
      background-color: rgba(119, 119, 119, 0.1);
      color: var(--color-status-processing);
    }

    .tracking-info {
      display: flex;
      flex-direction: column;
      gap: 8px;
      margin-top: 15px;
    }

    .tracking-number {
      font-family: monospace;
      padding: 8px 12px;
      background-color: #f1f5f9;
      border-radius: 6px;
      display: inline-block;
      letter-spacing: 1px;
      font-size: 14px;
      color: #475569;
      border: 1px dashed #cbd5e1;
    }

    /* Add styles for improved return rejection notice and price breakdown */
    .return-rejection-notice {
      display: flex;
      gap: 15px;
      background-color: #fef2f2;
      border-left: 4px solid #e53e3e;
      padding: 20px;
      margin-bottom: 25px;
      border-radius: 8px;
      animation: fadeIn 0.5s ease forwards;
      box-shadow: 0 2px 10px rgba(229, 62, 62, 0.1);
    }

    .return-rejection-icon {
      font-size: 28px;
      color: #e53e3e;
      flex-shrink: 0;
    }

    .return-rejection-message h4 {
      color: #e53e3e;
      margin-top: 0;
      margin-bottom: 10px;
      font-size: 18px;
      font-weight: 600;
      font-family: 'Poppins', sans-serif;
    }

    .return-rejection-message p {
      margin: 0 0 10px;
      color: #64748b;
      font-size: 14px;
      line-height: 1.6;
    }

    .return-rejection-message p:last-child {
      margin-bottom: 0;
    }

    .return-rejection-message p strong {
      color: #334155;
      font-weight: 600;
    }

    .price-breakdown {
      margin-top: 25px;
      background-color: #f8fafc;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.03);
      border: 1px solid #edf2f7;
    }

    .price-row {
      display: flex;
      justify-content: space-between;
      padding: 12px 0;
      font-size: 15px;
    }

    .price-row:not(:last-child) {
      border-bottom: 1px dashed #e2e8f0;
    }

    .price-label {
      color: #64748b;
      font-weight: 500;
    }

    .price-value {
      font-weight: 600;
      color: #334155;
    }

    .discount-row {
      color: #16a34a;
    }

    .discount-value {
      color: #16a34a;
      font-weight: 600;
    }

    .total-row {
      margin-top: 10px;
      padding-top: 15px;
      border-top: 2px solid #e2e8f0;
      font-weight: 700;
      font-size: 18px;
    }

    .total-row .price-label {
      color: #334155;
    }

    .total-row .price-value {
      color: #111827;
    }

    /* Additional product table styling */
    .product-table-name {
      font-weight: 500;
      color: #334155;
      font-size: 15px;
    }

    .product-table-price, 
    .product-table-quantity, 
    .product-table-total {
      color: #334155;
      text-align: center;
      font-size: 14px;
    }

    .product-table-total {
      font-weight: 600;
      color: #0f172a;
    }

    @media (max-width: 768px) {
      .order-summary-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .order-products-table {
        display: block;
        overflow-x: auto;
      }
    }

    @media (max-width: 576px) {
      .order-summary-grid {
        grid-template-columns: 1fr;
      }
      
      .return-rejection-notice {
        flex-direction: column;
        gap: 10px;
      }
      
      .shipping-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .address-badge {
        margin-top: 0;
      }
    }

    /* Add back missing styles */
    .order-info-section {
      margin-bottom: 30px;
      animation: fadeIn 0.5s ease forwards;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes modalFadeIn {
      from {
        opacity: 0;
        transform: translateY(30px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    /* Enhance return status message styling */
    .return-rejection-notice {
      display: flex;
      gap: 15px;
      background-color: #fef2f2;
      border-left: 4px solid #e53e3e;
      padding: 20px;
      margin-bottom: 25px;
      border-radius: 8px;
      animation: fadeIn 0.5s ease forwards;
      box-shadow: 0 2px 10px rgba(229, 62, 62, 0.1);
    }

    .return-rejection-icon {
      font-size: 28px;
      color: #e53e3e;
      flex-shrink: 0;
    }

    .return-rejection-message h4 {
      color: #e53e3e;
      margin-top: 0;
      margin-bottom: 10px;
      font-size: 18px;
      font-weight: 600;
      font-family: 'Poppins', sans-serif;
    }

    .return-rejection-message p {
      margin: 0 0 10px;
      color: #64748b;
      font-size: 14px;
      line-height: 1.6;
    }

    .return-rejection-message p:last-child {
      margin-bottom: 0;
    }

    .return-rejection-message p strong {
      color: #334155;
      font-weight: 600;
    }

    /* Add styling for pending return request */
    .return-pending-notice {
      display: flex;
      gap: 15px;
      background-color: #fffbeb;
      border-left: 4px solid #f59e0b;
      padding: 20px;
      margin-bottom: 25px;
      border-radius: 8px;
      animation: fadeIn 0.5s ease forwards;
      box-shadow: 0 2px 10px rgba(245, 158, 11, 0.1);
    }

    .return-pending-icon {
      font-size: 28px;
      color: #f59e0b;
      flex-shrink: 0;
    }

    .return-pending-message h4 {
      color: #d97706;
      margin-top: 0;
      margin-bottom: 10px;
      font-size: 18px;
      font-weight: 600;
      font-family: 'Poppins', sans-serif;
    }

    .return-pending-message p {
      margin: 0 0 10px;
      color: #64748b;
      font-size: 14px;
      line-height: 1.6;
    }

    .return-pending-message p:last-child {
      margin-bottom: 0;
    }

    .return-pending-message .return-date {
      color: #334155;
      font-weight: 500;
      background-color: #fef3c7;
      padding: 2px 8px;
      border-radius: 4px;
      display: inline-block;
      margin-top: 5px;
    }

    /* Improved status badges */
    .status-badge {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 5px 12px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 600;
      text-transform: uppercase;
    }

    .status-badge.rejected {
      background-color: #fee2e2;
      color: #b91c1c;
    }

    .status-badge.pending {
      background-color: #fef3c7;
      color: #d97706;
    }

    .status-badge.approved {
      background-color: #d1fae5;
      color: #059669;
    }

    /* Style the contact support text specifically */
    .contact-support {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-top: 8px;
      font-weight: 500;
      color: #4b5563;
    }

    .contact-support:before {
      content: 'üìû';
      font-size: 16px;
    }

    /* Add animation for order cards when filtering */
    @keyframes pulseHighlight {
      0% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(99, 102, 241, 0); }
      100% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0); }
    }

    .highlight-order {
      animation: pulseHighlight 2s;
    }
  </style>
</head>
<body>
  <div class="modal-backdrop" id="orderDetailModal">
    <div class="order-modal">
      <div class="modal-header">
        <h2 class="modal-title">Order Details</h2>
        <button class="modal-close" onclick="closeOrderModal()">&times;</button>
      </div>
      <div class="modal-body" id="orderModalContent">
        <!-- Content will be dynamically inserted here -->
      </div>
      <div class="modal-footer">
        <button class="modal-action modal-secondary" onclick="closeOrderModal()">Close</button>
        <button class="modal-action modal-primary" onclick="downloadInvoice()">Download Invoice</button>
      </div>
    </div>
  </div>

  <div id="returnOrderModal" class="modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h2>Return Order</h2>
      <div class="return-policy-info" style="background-color: #f8f9fa; padding: 12px; border-radius: 4px; margin-bottom: 15px; border-left: 3px solid #0066CC;">
        <h4 style="margin-top: 0; margin-bottom: 8px; color: #0066CC;">Return Policy</h4>
        <ul style="margin: 0; padding-left: 15px;">
          <li>Returns must be initiated within 7 days of delivery</li>
          <li>Product must be in original condition with all packaging</li>
          <li>If return is rejected, you cannot request again for the same order</li>
          <li>Return approval is subject to inspection upon receipt</li>
        </ul>
      </div>
      <p>Are you sure you want to return this order?</p>
      <form id="returnOrderForm" action="/request-return" method="post">
        <input type="hidden" name="orderId" id="returnOrderId">
        <div class="form-group">
          <label for="returnReason">Reason for Return:</label>
          <select name="reason" id="returnReason" required>
            <option value="">Select a reason</option>
            <option value="damaged">Product Damaged</option>
            <option value="wrong-item">Wrong Item Received</option>
            <option value="defective">Product Defective</option>
            <option value="changed-mind">Changed My Mind</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="form-group">
          <label for="returnComments">Additional Comments:</label>
          <textarea name="returnComments" id="returnComments" rows="4" placeholder="Please provide specific details about your return request..."></textarea>
        </div>
        <div class="modal-actions">
          <button type="button" class="modal-btn modal-btn-cancel" onclick="closeReturnModal()">Cancel</button>
          <button type="submit" class="modal-btn modal-btn-confirm">Confirm Return</button>
        </div>
      </form>
    </div>
  </div>

  <div id="app">
    <main class="main">
      <div class="container">
        <div class="page-header">
          <h1>Your Orders</h1>
          <div class="filter-controls">
            <select id="statusFilter" class="filter-select">
              <option value="all">All Orders</option>
              <option value="delivered">Delivered</option>
              <option value="shipped">Shipped</option>
              <option value="processing">Processing</option>
            </select>
            <select id="timeFilter" class="filter-select">
              <option value="all">All Time</option>
              <option value="30days">Last 30 Days</option>
              <option value="6months">Last 6 Months</option>
              <option value="year">Last Year</option>
            </select>
          </div>
        </div>

        <div class="search-section">
          <div class="search-container">
            <input type="text" id="orderSearch" placeholder="Search your orders..." autocomplete="off" />
            <button class="search-clear" id="clearSearch" style="display: none;">&times;</button>
          </div>
        </div>
        
        <style>
          .search-container {
            position: relative;
            max-width: 400px;
            margin-left: auto;
          }
          
          .search-clear {
            position: absolute;
            right: 40px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #a0aec0;
            font-size: 16px;
            cursor: pointer;
            opacity: 0.7;
            transition: all 0.2s ease;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
          }
          
          .search-clear:hover {
            opacity: 1;
            background-color: #f7fafc;
          }
        </style>

        <section class="orders-section">
          <div class="time-period">
            <h2 class="section-title">Order History</h2>
          </div>
          <div id="ordersList" class="orders-list">
            <% if (orders && orders.length > 0) { %>
              <% orders.forEach((order, index) => { %>
                <div class="order-card" 
                     data-order-id="<%= order.orderId %>"
                     data-mongodb-id="<%= order._id %>"
                     data-order-date="<%= new Date(order.createdOn || order.invoiceDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %>"
                     data-order-status="<%= order.status %>"
                     data-order-total="<%= order.finalAmount %>"
                     data-payment-method="<%= order.paymentMethod === 'razorpay' ? 'Razorpay' : order.paymentMethod === 'wallet' ? 'Wallet' : 'Cash on Delivery' %>"
                     data-shipping-name="<%= order.shippingInfo ? order.shippingInfo.name : '' %>"
                     data-shipping-phone="<%= order.shippingInfo ? order.shippingInfo.phone : '' %>"
                     data-shipping-address="<%= order.shippingInfo ? (order.shippingInfo.addressLine + ', ' + order.shippingInfo.city + ', ' + order.shippingInfo.state + ' ' + order.shippingInfo.pincode) : '' %>"
                     data-shipping-type="<%= order.shippingInfo ? order.shippingInfo.addressType : '' %>"
                     data-return-rejected="<%= order.returnDetails && (order.returnDetails.approvalStatus === 'rejected' || order.returnDetails.returnRejected) ? 'true' : 'false' %>"
                     data-return-requested="<%= order.returnDetails && order.returnDetails.requestDate ? 'true' : 'false' %>"
                     data-coupon-applied="<%= order.coupenApplied ? 'true' : 'false' %>"
                     data-coupon-code="<%= order.couponCode || '' %>"
                     data-coupon-discount="<%= order.couponDiscount || 0 %>"
                     data-offer-discount="<%= order.offerDiscount || 0 %>"
                     data-rejection-date="<%= order.returnDetails && order.returnDetails.rejectionDate ? new Date(order.returnDetails.rejectionDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : '' %>"
                     data-rejection-reason="<%= order.returnDetails && order.returnDetails.rejectionReason ? order.returnDetails.rejectionReason : '' %>"
                     data-request-date="<%= order.returnDetails && order.returnDetails.requestDate ? new Date(order.returnDetails.requestDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : '' %>"
                     data-product-names="<%= order.orderedItems.map(item => item.product ? item.product.productName : '').join(',') %>"
                     data-coupon-applied="<%= order.coupenApplied ? 'true' : 'false' %>">
                  <div class="order-header">
                    <div class="order-date"><%= new Date(order.createdOn || order.invoiceDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></div>
                    <div class="order-number">Order #<%= order.orderId %></div>
                  </div>
                  
                  <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                    <div class="order-body">
                      <div class="order-details">
                        <div class="order-products">
                          <% order.orderedItems.forEach((item, itemIndex) => { %>
                            <div class="product-item <%= itemIndex > 0 ? 'additional-product' : '' %>">
                              <div class="product-image-container">
                                <img class="order-image" 
                                     src="/product-images/<%= item.product && item.product.productImage && item.product.productImage[0] ? item.product.productImage[0] : '' %>" 
                                     alt="<%= item.product ? item.product.productName : 'Product' %>"
                                     onerror="this.src='/images/default-product.jpg'" />
                              </div>
                              <div class="product-details">
                                <div class="product-name"><%= item.product ? item.product.productName : 'Product' %></div>
                                <div class="product-price">‚Çπ<%= item.price.toLocaleString('en-IN') %> √ó <%= item.quantity %></div>
                              </div>
                            </div>
                          <% }); %>
                        </div>
                        
                        <div class="order-meta">
                          <div class="order-meta-item">
                            <span class="order-meta-label">Status</span>
                            <span class="order-status <%= order.status.toLowerCase() %>">
                              <span class="order-status-dot"></span>
                              <%= order.status %>
                              <% if (order.returnDetails && order.returnDetails.returnRejected) { %>
                                <span class="return-rejected-badge">Return request cancelled</span>
                              <% } %>
                            </span>
                          </div>
                          <div class="order-meta-item">
                            <span class="order-meta-label">Total Amount</span>
                            <span class="order-meta-value">‚Çπ<%= order.finalAmount.toLocaleString('en-IN') %></span>
                          </div>
                          <div class="order-meta-item">
                            <span class="order-meta-label">Items</span>
                            <span class="order-meta-value"><%= order.orderedItems.length %> item<%= order.orderedItems.length > 1 ? 's' : '' %></span>
                          </div>
                          
                          <% if (order.shippingInfo && order.shippingInfo.name) { %>
                          <div class="order-meta-item order-address-summary">
                            <span class="order-meta-label">Shipping To</span>
                            <span class="order-meta-value"><%= order.shippingInfo.name %> | <%= order.shippingInfo.addressType %></span>
                          </div>
                          <% } %>
                        </div>
                        <div class="order-actions">
                          <a href="/track-order/<%= order._id %>" class="order-btn order-btn-primary">Track Order</a>
                          <button class="order-btn order-btn-secondary" onclick="showOrderDetails('<%= order.orderId %>')">View Details</button>
                          <% if (order.status === 'Processing') { %>
                              <button 
                                  onclick="cancelOrder('<%= order._id %>')"
                                  class="order-btn order-btn-danger"
                              >
                                  Cancel Order
                              </button>
                          <% } %>
                          
                          <% if (order.returnDetails && (order.returnDetails.approvalStatus === 'rejected' || order.returnDetails.returnRejected === true)) { %>
                            <div class="inline-return-rejection">
                              <strong>Return Request Cancelled</strong>
                              <% if (order.returnDetails.rejectionDate) { %>
                                <br>Cancelled on <%= new Date(order.returnDetails.rejectionDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                              <% } %>
                              <% if (order.returnDetails.rejectionReason) { %>
                                <br>Reason: <%= order.returnDetails.rejectionReason %>
                              <% } %>
                              <br>Your return request has been cancelled. 
                              <br>Please contact customer support for assistance.
                            </div>
                          <% } else if (order.status === 'Return Request') { %>
                            <div class="inline-return-message">
                              <strong>Return Request Pending</strong>
                              <% if (order.returnDetails && order.returnDetails.requestDate) { %>
                                <br>Requested on <%= new Date(order.returnDetails.requestDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                              <% } %>
                              <br>Your return request is being processed.
                            </div>
                          <% } else if (order.status === 'Delivered') { %>
                            <% if (order.returnDetails && order.returnDetails.requestDate) { %>
                              <div class="inline-return-message">
                                <strong>Return Request Pending</strong>
                                <br>Requested on <%= new Date(order.returnDetails.requestDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                                <br>Your return request is being processed.
                              </div>
                            <% } else { %>
                              <button class="order-btn order-btn-danger" onclick="showReturnModal('<%= order._id %>')">Return Order</button>
                            <% } %>
                          <% } %>
                        </div>
                      </div>
                    </div>
                  <% } %>
                </div>
              <% }); %>
            <% } else { %>
              <div class="no-orders">
                <p>No orders found. Start shopping to see your orders here!</p>
                <a href="/shop" class="continue-shopping-link">Continue Shopping</a>
              </div>
            <% } %>
          </div>
        </section>
      </div>
    </main>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

  <script>
    function formatDate(dateString) {
      const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric'
      };
      return new Date(dateString).toLocaleDateString('en-US', options);
    }

    function showOrderDetails(orderId) {
      const orderCard = document.querySelector(`.order-card[data-order-id="${orderId}"]`);
      console.log('Finding order card with ID:', orderId);
      console.log('Found order card:', orderCard);
      
      if (!orderCard) {
        console.error('Order card not found for ID:', orderId);
        return;
      }
      
      const orderDate = orderCard.getAttribute('data-order-date');
      const orderStatus = orderCard.getAttribute('data-order-status');
      const orderTotal = parseFloat(orderCard.getAttribute('data-order-total'));
      // Get the already formatted payment method from the data attribute
      const paymentMethod = orderCard.getAttribute('data-payment-method');
      
      const returnRejected = orderCard.getAttribute('data-return-rejected') === 'true';
      const returnRequested = orderCard.getAttribute('data-return-requested') === 'true';
      const rejectionDate = orderCard.getAttribute('data-rejection-date');
      const rejectionReason = orderCard.getAttribute('data-rejection-reason');
      const requestDate = orderCard.getAttribute('data-request-date');
      
      const shippingName = orderCard.getAttribute('data-shipping-name');
      const shippingPhone = orderCard.getAttribute('data-shipping-phone');
      const shippingAddress = orderCard.getAttribute('data-shipping-address');
      const shippingType = orderCard.getAttribute('data-shipping-type');
      
      // Get coupon applied status, code and discount amount
      const couponApplied = orderCard.getAttribute('data-coupon-applied') === 'true';
      const couponCode = orderCard.getAttribute('data-coupon-code') || '';
      const couponDiscount = parseFloat(orderCard.getAttribute('data-coupon-discount') || 0);
      
      console.log('Order details:', { 
        orderDate, 
        orderStatus, 
        orderTotal,
        paymentMethod,
        coupon: {
          applied: couponApplied,
          code: couponCode,
          discount: couponDiscount
        },
        returnStatus: {
          rejected: returnRejected,
          requested: returnRequested,
          rejectionDate,
          rejectionReason,
          requestDate
        },
        shipping: {
          name: shippingName,
          phone: shippingPhone,
          address: shippingAddress,
          type: shippingType
        }
      });
      
      const productItems = orderCard.querySelectorAll('.product-item');
      console.log('Found products:', productItems.length);
      
      let productsHTML = `
        <table class="order-products-table">
          <thead>
            <tr>
              <th class="product-table-header">Product</th>
              <th class="product-table-header">Name</th>
              <th class="product-table-header">Price</th>
              <th class="product-table-header">Quantity</th>
              <th class="product-table-header">Total</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      let subtotal = 0;
      
      productItems.forEach(item => {
        const productName = item.querySelector('.product-name').textContent;
        const priceText = item.querySelector('.product-price').textContent;
        
        console.log('Price text:', priceText);
        
        const regex = /‚Çπ([0-9,]+(?:\.[0-9]+)?)(?:\s*√ó\s*)(\d+)/;
        const match = priceText.match(regex);
        
        let price = 0;
        let quantity = 1;
        
        if (match && match.length >= 3) {
          price = parseFloat(match[1].replace(/,/g, ''));
          quantity = parseInt(match[2]);
          console.log('Extracted price:', price, 'quantity:', quantity);
        } else {
          console.log('Regex match failed, trying fallback extraction method');
          const parts = priceText.split('√ó');
          if (parts.length >= 2) {
            const priceStr = parts[0].replace(/[^\d.,]/g, '');
            price = parseFloat(priceStr);
            quantity = parseInt(parts[1].trim());
            console.log('Fallback extraction - price:', price, 'quantity:', quantity);
          }
        }
        
        if (isNaN(price)) {
          console.warn('Invalid price detected, defaulting to 0');
          price = 0;
        }
        if (isNaN(quantity) || quantity < 1) {
          console.warn('Invalid quantity detected, defaulting to 1');
          quantity = 1;
        }
        
        const total = price * quantity;
        subtotal += total;
        
        const imageSrc = item.querySelector('.order-image').getAttribute('src');
        
        productsHTML += `
          <tr class="product-table-row">
            <td class="product-table-cell">
              <img src="${imageSrc}" alt="${productName}" class="product-table-image">
            </td>
            <td class="product-table-cell product-table-name">${productName}</td>
            <td class="product-table-cell product-table-price">‚Çπ${price.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
            <td class="product-table-cell product-table-quantity">${quantity}</td>
            <td class="product-table-cell product-table-total">‚Çπ${total.toLocaleString('en-IN', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
          </tr>
        `;
        
        console.log('Product:', productName, 'Price:', price, 'Quantity:', quantity, 'Total:', total);
      });
      
      productsHTML += `
          </tbody>
        </table>
      `;
      
      let shippingInfoHTML = '';
      
      if (shippingName && shippingAddress) {
        shippingInfoHTML = `
          <div class="shipping-header">
            <div class="shipping-title">Delivery Address</div>
            ${shippingType ? `<div class="address-badge">${shippingType}</div>` : ''}
          </div>
          <div class="address-name">${shippingName}</div>
          <div class="address-line">${shippingAddress}</div> <div class="address-phone">${shippingPhone}</div>
        `;
      } else {
        shippingInfoHTML = `
          <div class="address-placeholder">
            <p>The shipping information for this order is not available.</p>
          </div>
        `;
      }
      
      let trackingHTML = '';
      const trackingNumber = generateTrackingNumber(orderId);
      
      if (orderStatus.toLowerCase() === 'delivered') {
        trackingHTML = `
          <span class="summary-label">Tracking Number</span>
          <span class="tracking-number">${trackingNumber}</span>
          <span class="summary-label">Delivery Date</span>
          <span class="summary-value">Delivered on ${formatDeliveryDate(orderDate)}</span>
        `;
      } else if (orderStatus.toLowerCase() === 'shipped') {
        trackingHTML = `
          <span class="summary-label">Tracking Number</span>
          <span class="tracking-number">${trackingNumber}</span>
          <span class="summary-label">Estimated Delivery</span>
          <span class="summary-value">Expected by ${formatEstimatedDelivery(orderDate)}</span>
        `;
      } else {
        trackingHTML = `
          <span class="summary-label">Status</span>
          <span class="summary-value">Your order is being processed</span>
          <span class="summary-label">Estimated Shipping</span>
          <span class="summary-value">Within 1-2 business days</span>
        `;
      }
      
      const shipping = 40;
      
      if (Math.abs(subtotal + shipping - orderTotal) > orderTotal * 0.2) {
        console.warn('Calculated subtotal differs from order total. Using order total for reliability.');
        subtotal = Math.max(0, orderTotal - shipping);
      }
      
      const finalTotal = orderTotal;
      
      // Always use the coupon discount from the database if it exists
      // Otherwise fall back to a calculated discount
      const expectedTotal = subtotal + shipping;
      const discount = couponApplied && couponDiscount > 0 ? couponDiscount : (expectedTotal > finalTotal ? expectedTotal - finalTotal : 0);
      
      let priceBreakdownHTML = `
        <div class="price-breakdown">
          <div class="price-row">
            <span class="price-label">Subtotal</span>
            <span class="price-value">‚Çπ${subtotal.toLocaleString('en-IN')}</span>
          </div>
          <div class="price-row">
            <span class="price-label">Shipping Fee</span>
            <span class="price-value">‚Çπ${shipping.toLocaleString('en-IN')}</span>
          </div>
      `;
      
      // Always show the discount row if there was a coupon applied, even if discount is 0
      if (couponApplied || discount > 0) {
        priceBreakdownHTML += `
          <div class="price-row discount-row">
            <span class="price-label">${couponApplied ? `Coupon Discount${couponCode ? ` (${couponCode})` : ''}` : 'Discount'}</span>
            <span class="price-value discount-value">-‚Çπ${discount.toLocaleString('en-IN')}</span>
          </div>
        `;
      }
      
      priceBreakdownHTML += `
          <div class="price-row total-row">
            <span class="price-label">Total</span>
            <span class="price-value">‚Çπ${finalTotal.toLocaleString('en-IN')}</span>
          </div>
        </div>
      `;
      
      // Improved status messages
      let returnStatusHTML = '';
      
      if (returnRejected) {
        returnStatusHTML = `
          <div class="return-rejection-notice">
            <div class="return-rejection-icon">‚ö†Ô∏è</div>
            <div class="return-rejection-message">
              <h4>Return Request Cancelled</h4>
              <div class="status-badge rejected">Cancelled</div>
              <p>${rejectionDate ? `Your return request for this order was cancelled on <strong>${rejectionDate}</strong>.` : 'Your return request for this order was cancelled.'}</p>
              ${rejectionReason ? `<p><strong>Reason:</strong> ${rejectionReason}</p>` : ''}
              <p class="contact-support">If you have questions, please contact our customer support.</p>
            </div>
          </div>
        `;
      } else if (returnRequested || orderStatus.toLowerCase() === 'return request') {
        returnStatusHTML = `
          <div class="return-pending-notice">
            <div class="return-pending-icon">‚è≥</div>
            <div class="return-pending-message">
              <h4>Return Request Pending</h4>
              <div class="status-badge pending">In Process</div>
              <p>Your return request is currently being processed by our team.</p>
              ${requestDate ? `<p>Requested on <span class="return-date">${requestDate}</span></p>` : ''}
              <p>We'll notify you once we've reviewed your request.</p>
            </div>
          </div>
        `;
      }
      
      const modalContent = `
        <div class="order-detail-container">
          ${returnStatusHTML}
          
          <div class="order-info-section">
            <h3 class="section-title">Order Summary</h3>
            <div class="order-summary-grid">
              <div class="summary-item">
                <span class="summary-label">Order Number</span>
                <span class="summary-value">#${orderId}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Order Date</span>
                <span class="summary-value">${orderDate}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Status</span>
                <span class="summary-value order-status-large ${orderStatus.toLowerCase()}">${orderStatus}</span>
              </div>
              <div class="summary-item">
                <span class="summary-label">Payment Method</span>
                <span class="summary-value">${
                  paymentMethod === 'razorpay' ? 'Razorpay' :
                  paymentMethod === 'wallet' ? 'Wallet' :
                  paymentMethod === 'cod' ? 'Cash on Delivery' :
                  paymentMethod || 'Cash on Delivery'
                }</span>
              </div>
            </div>
            
            <div class="tracking-info">
              ${trackingHTML}
            </div>
          </div>
          
          <div class="order-info-section">
            <h3 class="section-title">Products</h3>
            ${productsHTML}
            
            ${priceBreakdownHTML}
          </div>
          
          <div class="order-info-section">
            <h3 class="section-title">Shipping Information</h3>
            <div class="shipping-info">
              ${shippingInfoHTML}
            </div>
          </div>
        </div>
      `;
      
      document.getElementById('orderModalContent').innerHTML = modalContent;
      
      document.getElementById('orderDetailModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    }
    
    function closeOrderModal() {
      document.getElementById('orderDetailModal').classList.remove('active');
      document.body.style.overflow = '';
    }
    
    function downloadInvoice() {
      const modalContent = document.getElementById('orderModalContent');
      
      window.jsPDF = window.jspdf.jsPDF;
      
      const printableContent = modalContent.cloneNode(true);
      
      const tempDiv = document.createElement('div');
      tempDiv.appendChild(printableContent);
      tempDiv.style.padding = '20px';
      tempDiv.style.color = '#000';
      tempDiv.style.backgroundColor = '#fff';
      
      const title = document.createElement('h1');
      title.textContent = 'INVOICE';
      title.style.textAlign = 'center';
      title.style.color = '#e63946';
      title.style.marginBottom = '20px';
      printableContent.insertBefore(title, printableContent.firstChild);
      
      const companyInfo = document.createElement('div');
      companyInfo.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px; font-size: 14px;">
          <p><strong>MobileHub Store</strong></p>
          <p>123 Mobile Street, Gadget City</p>
          <p>Email: support@mobilehub.com | Phone: +1-123-456-7890</p>
        </div>
      `;
      printableContent.insertBefore(companyInfo, printableContent.firstChild.nextSibling);
      
      const footer = document.createElement('div');
      footer.innerHTML = `
        <div style="margin-top: 30px; border-top: 1px solid #eee; padding-top: 15px; text-align: center; font-size: 12px;">
          <p>Thank you for shopping with MobileHub!</p>
          <p>For any queries related to this order, please contact our customer support.</p>
          <p>This is a computer-generated invoice and does not require a physical signature.</p>
        </div>
      `;
      printableContent.appendChild(footer);
      
      const elementsToHide = printableContent.querySelectorAll('.tracking-info');
      elementsToHide.forEach(el => {
        el.style.display = 'none';
      });
      
      const orderIdElement = printableContent.querySelector('.summary-value');
      const orderId = orderIdElement ? orderIdElement.textContent.replace('#', '') : 'invoice';
      
      document.body.appendChild(tempDiv);
      
      html2canvas(tempDiv, {
        scale: 2,
        useCORS: true,
        logging: false
      }).then(canvas => {
        document.body.removeChild(tempDiv);
        
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF({
          orientation: 'portrait',
          unit: 'mm',
          format: 'a4'
        });
        
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
        const imgX = (pdfWidth - imgWidth * ratio) / 2;
        const imgY = 10;
        
        pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
        pdf.save(`MobileHub_Invoice_${orderId}.pdf`);
      }).catch(err => {
        console.error('Error generating PDF:', err);
        alert('There was an error generating your invoice. Please try again.');
      });
    }
    
    document.getElementById('orderDetailModal').addEventListener('click', function(event) {
      if (event.target === this) {
        closeOrderModal();
      }
    });
    
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape' && document.getElementById('orderDetailModal').classList.contains('active')) {
        closeOrderModal();
      }
    });

    function debounce(func, delay) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
      };
    }

    function filterOrders() {
      const statusFilter = document.getElementById('statusFilter').value;
      const timeFilter = document.getElementById('timeFilter').value;
      const searchQuery = document.getElementById('orderSearch').value.toLowerCase().trim();
      
      const orderCards = document.querySelectorAll('.order-card');
      let visibleCount = 0;
      
      orderCards.forEach(card => {
        let shouldShow = true;
        
        // Filter by status
        if (statusFilter !== 'all') {
          const orderStatus = card.getAttribute('data-order-status').toLowerCase();
          if (orderStatus !== statusFilter) {
            shouldShow = false;
          }
        }
        
        // Filter by time
        if (timeFilter !== 'all' && shouldShow) {
          const orderDate = new Date(card.getAttribute('data-order-date'));
          const today = new Date();
          let compareDate;
          
          switch(timeFilter) {
            case '30days':
              compareDate = new Date();
              compareDate.setDate(today.getDate() - 30);
              if (orderDate < compareDate) shouldShow = false;
              break;
            case '6months':
              compareDate = new Date();
              compareDate.setMonth(today.getMonth() - 6);
              if (orderDate < compareDate) shouldShow = false;
              break;
            case 'year':
              compareDate = new Date();
              compareDate.setFullYear(today.getFullYear() - 1);
              if (orderDate < compareDate) shouldShow = false;
              break;
          }
        }
        
        // Filter by search query
        if (searchQuery && shouldShow) {
          const orderNumber = card.getAttribute('data-order-id').toLowerCase();
          const orderDate = card.getAttribute('data-order-date').toLowerCase();
          const orderTotal = card.getAttribute('data-order-total').toLowerCase();
          const productNamesData = card.getAttribute('data-product-names').toLowerCase();
          
          // Check if search query matches any of the data
          const matchesOrderNumber = orderNumber.includes(searchQuery);
          const matchesOrderDate = orderDate.includes(searchQuery);
          const matchesOrderTotal = orderTotal.includes(searchQuery);
          const matchesProductName = productNamesData.includes(searchQuery);
          
          if (!matchesOrderNumber && !matchesOrderDate && !matchesOrderTotal && !matchesProductName) {
            shouldShow = false;
          }
        }
        
        // Update visibility based on all filters
        if (shouldShow) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Show "no orders" message if all are filtered out
      const ordersList = document.getElementById('ordersList');
      const existingNoOrders = ordersList.querySelector('.no-orders');
      
      if (visibleCount === 0) {
        if (existingNoOrders) {
          existingNoOrders.style.display = 'block';
          const messageElement = existingNoOrders.querySelector('p');
          if (messageElement) {
            if (searchQuery) {
              messageElement.innerHTML = `No orders match your search for "<strong>${searchQuery}</strong>".<br>Try different search terms or clear the search.`;
            } else {
              messageElement.innerHTML = 'No orders match your filter criteria.<br>Try adjusting your filters.';
            }
          }
        } else {
          const newMessage = document.createElement('div');
          newMessage.className = 'no-orders';
          
          let messageText = searchQuery ? 
            `No orders match your search for "<strong>${searchQuery}</strong>".<br>Try different search terms or clear the search.` : 
            'No orders match your filter criteria.<br>Try adjusting your filters.';
          
          newMessage.innerHTML = `
            <p>${messageText}</p>
            <button onclick="resetFilters()" class="continue-shopping-link">Reset Filters</button>
          `;
          
          // Clear existing orders to make room for the full-width message
          const existingCards = ordersList.querySelectorAll('.order-card');
          existingCards.forEach(card => {
            card.style.display = 'none';
          });
          
          ordersList.appendChild(newMessage);
        }
        
        // Remove grid styling to allow full-width display
        ordersList.style.display = 'block';
      } else {
        // Restore grid styling when there are visible results
        ordersList.style.display = 'grid';
        
        if (existingNoOrders) {
          existingNoOrders.style.display = 'none';
        }
      }
    }
    
    // Function to reset all filters
    function resetFilters() {
      document.getElementById('statusFilter').value = 'all';
      document.getElementById('timeFilter').value = 'all';
      document.getElementById('orderSearch').value = '';
      filterOrders();
    }

    document.addEventListener('DOMContentLoaded', () => {
      const statusFilter = document.getElementById('statusFilter');
      const timeFilter = document.getElementById('timeFilter');
      const searchInput = document.getElementById('orderSearch');
      const clearSearchBtn = document.getElementById('clearSearch');
      
      if (statusFilter && timeFilter && searchInput) {
        // Add event listeners for filters
        statusFilter.addEventListener('change', filterOrders);
        timeFilter.addEventListener('change', filterOrders);
        
        // Enhance search input
        searchInput.addEventListener('input', function() {
          // Show/hide clear button
          clearSearchBtn.style.display = this.value.length > 0 ? 'block' : 'none';
          
          // Apply search filter with debounce
          debounce(filterOrders, 300)();
        });
        
        // Clear search button
        clearSearchBtn.addEventListener('click', function() {
          searchInput.value = '';
          this.style.display = 'none';
          searchInput.focus();
          filterOrders();
        });
        
        // Add keyboard shortcuts
        searchInput.addEventListener('keydown', function(e) {
          // Clear on Escape key
          if (e.key === 'Escape') {
            searchInput.value = '';
            clearSearchBtn.style.display = 'none';
            filterOrders();
          }
        });
        
        // Placeholder enhancement for better UX
        searchInput.addEventListener('focus', function() {
          this.setAttribute('placeholder', 'Search by order #, date, or product...');
        });
        
        searchInput.addEventListener('blur', function() {
          this.setAttribute('placeholder', 'Search your orders...');
        });
        
        // Run initial filter to set up the page
        filterOrders();
      }
    });

    function formatDeliveryDate(orderDate) {
      const dateObj = new Date(orderDate);
      dateObj.setDate(dateObj.getDate() + 5);
      return dateObj.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
    }
    
    function formatEstimatedDelivery(orderDate) {
      const dateObj = new Date(orderDate);
      dateObj.setDate(dateObj.getDate() + 3);
      const maxDate = new Date(orderDate);
      maxDate.setDate(maxDate.getDate() + 5);
      
      return `${dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${maxDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
    }
    
    function generateTrackingNumber(orderId) {
      return `MHUB${orderId.substring(0, 8).toUpperCase()}IN`;
    }
    function cancelOrder(orderId) {
      // Show information about cancellation policy
      Swal.fire({
        title: 'Cancel Order?',
        html: `
          <div class="cancel-order-info">
            <p>Are you sure you want to cancel this order?</p>
            <p class="cancel-policy"><strong>Note:</strong> Only orders with 'Processing' status can be cancelled.</p>
          </div>
        `,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
      }).then((result) => {
        if (result.isConfirmed) {
          // Show loading state
          Swal.fire({
            title: 'Cancelling Order...',
            text: 'Please wait while we process your request',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          // Send request to cancel order
          fetch(`/cancel-order/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(async response => {
            // Parse the JSON response regardless of status code
            const data = await response.json();
            
            // If not successful, throw with the error message from the server
            if (!response.ok) {
              throw new Error(data.message || `Server error: ${response.status}`);
            }
            
            return data;
          })
          .then(data => {
            if (data.success) {
              Swal.fire({
                icon: 'success',
                title: 'Order Cancelled',
                text: data.message || 'Your order has been cancelled successfully. The refund has been added to your wallet.',
                timer: 3000,
                showConfirmButton: true
              }).then(() => {
                // Reload the page to reflect the changes
                window.location.reload();
              });
            } else {
              throw new Error(data.message || 'Failed to cancel order');
            }
          })
          .catch(error => {
            console.error('Error cancelling order:', error);
            
            // Provide more specific error messages based on error content
            let errorTitle = 'Cancellation Failed';
            let errorText = error.message || 'Failed to cancel order. Please try again.';
            
            // Check for specific status-based error messages
            if (error.message && error.message.includes('Pending')) {
              errorTitle = 'Cannot Cancel Pending Order';
            } else if (error.message && error.message.includes('Delivered')) {
              errorTitle = 'Cannot Cancel Delivered Order';
            } else if (error.message && error.message.includes('already been cancelled')) {
              errorTitle = 'Order Already Cancelled';
            } else if (error.message && error.message.includes('cannot be cancelled')) {
              errorTitle = 'Order Cannot Be Cancelled';
            }
            
            Swal.fire({
              icon: 'error',
              title: errorTitle,
              text: errorText
            });
          });
        }
      });
    }


    function showReturnModal(orderId) {
      console.log('Setting orderId for return:', orderId);
      
      const orderCard = document.querySelector(`.order-card[data-mongodb-id="${orderId}"]`);
      if (!orderCard) {
        console.error('Order card not found for ID:', orderId);
        return;
      }
      
      const orderStatus = orderCard.getAttribute('data-order-status');
      const returnRequested = orderCard.getAttribute('data-return-requested') === 'true';
      const returnRejected = orderCard.getAttribute('data-return-rejected') === 'true';
      
      if (returnRejected) {
        Swal.fire({
          icon: 'error',
          title: 'Return Already Cancelled',
          text: 'Your return request for this order was cancelled. Please contact customer support for assistance.',
          confirmButtonColor: '#3085d6'
        });
        return;
      }
      
      if (orderStatus === 'Return Request' || returnRequested) {
        Swal.fire({
          icon: 'info',
          title: 'Return Already Requested',
          text: 'A return request for this order is already in progress.',
          confirmButtonColor: '#3085d6'
        });
        return;
      }
      
      document.getElementById('returnOrderId').value = orderId;
      document.getElementById('returnOrderModal').style.display = 'block';
    }

    function closeReturnModal() {
      document.getElementById('returnOrderModal').style.display = 'none';
    }

    document.getElementById('returnOrderForm').addEventListener('submit', function(event) {
      const orderId = document.getElementById('returnOrderId').value;
      const reason = document.getElementById('returnReason').value;
      const comments = document.getElementById('returnComments').value;
      
      console.log('Submitting return request with orderId:', orderId, 'reason:', reason);
      
      if (!orderId || !reason) {
        event.preventDefault();
        Swal.fire({
          icon: 'warning',
          title: 'Missing Information',
          text: 'Please select a reason for return',
          confirmButtonColor: '#3085d6'
        });
        return false;
      }
      
      // Show loading message while form submits
      event.preventDefault();
      
      Swal.fire({
        title: 'Processing...',
        text: 'Submitting your return request',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Submit the form data via AJAX
      fetch('/request-return', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId: orderId,
          returnReason: reason,
          returnComments: comments
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Server responded with status: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Return Requested',
            text: 'Your return request has been submitted successfully. We will review it shortly.',
            confirmButtonColor: '#3085d6'
          }).then(() => {
            window.location.reload();
          });
        } else {
          throw new Error(data.message || 'Failed to submit return request');
        }
      })
      .catch(error => {
        console.error('Error requesting return:', error);
        Swal.fire({
          icon: 'error',
          title: 'Request Failed',
          text: error.message || 'Failed to submit return request. Please try again.',
          confirmButtonColor: '#3085d6'
        });
      });
    });
    
    document.querySelector('.close-modal').addEventListener('click', closeReturnModal);
    window.addEventListener('click', function(event) {
      if (event.target === document.getElementById('returnOrderModal')) {
        closeReturnModal();
      }
    });
  </script>
</body>
</html>
<%- include("../../views/partials/user/footer") %>