<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verify Email Change</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f7f9fc;
    }
    
    h1 {
      color: #2c3e50;
      margin-bottom: 10px;
    }
    
    .subtitle {
      color: #7f8c8d;
      margin-top: 0;
      margin-bottom: 30px;
    }
    
    .otp-container {
      background-color: #fff;
      border-radius: 8px;
      padding: 25px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .email-info {
      background-color: #f1f8ff;
      border-radius: 6px;
      padding: 15px;
      margin-bottom: 25px;
      border-left: 4px solid #3498db;
    }
    
    .otp-fields {
      display: flex;
      justify-content: space-between;
      margin: 30px 0;
      gap: 10px;
    }
    
    .otp-input {
      width: 45px;
      height: 55px;
      text-align: center;
      font-size: 24px;
      font-weight: 500;
      border: 2px solid #ddd;
      border-radius: 6px;
      background-color: #f9f9f9;
    }
    
    .otp-input:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
      background-color: #fff;
    }
    
    button {
      background-color: #3498db;
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 6px;
      font-size: 16px;
      font-weight: 500;
      width: 100%;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    button:hover {
      background-color: #2980b9;
    }
    
    .resend {
      text-align: center;
      margin-top: 20px;
      font-size: 14px;
    }
    
    .resend a {
      color: #3498db;
      text-decoration: none;
      font-weight: 500;
    }
    
    .resend a:hover {
      text-decoration: underline;
    }
    
    .message {
      margin-top: 20px;
      padding: 12px;
      border-radius: 6px;
      font-size: 14px;
      display: none;
    }
    
    .success {
      background-color: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }
    
    .error {
      background-color: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }
    
    .timer {
      text-align: center;
      margin-top: 20px;
      font-size: 16px;
      font-weight: bold;
      color: #e74c3c;
    }
    
    @media (max-width: 480px) {
      .otp-input {
        width: 40px;
        height: 50px;
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <h1>Verify Your Email Change</h1>
  <p class="subtitle">Enter the 6-digit code sent to your new email address</p>
  
  <div class="otp-container">
    <div class="email-info">
      <p>We've sent a verification code to:</p>
      <p><strong id="newEmail"><%=user.email%></strong></p>
    </div>

    <% if (typeof message !== 'undefined' && message) { %>
        <div class="alert alert-danger" style="color: red; text-align: center; margin-bottom: 10px;">
            <%= message %>
        </div>
    <% } %>
    
    <div id="timer" class="timer">Code expires in: 01:00</div>
    
    <form id="otpForm" action="/verify-email-otp" method="post">
        <div class="otp-fields">
            <input type="text" class="otp-input" name="otp1" maxlength="1" pattern="[0-9]" inputmode="numeric" required autofocus>
            <input type="text" class="otp-input" name="otp2" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
            <input type="text" class="otp-input" name="otp3" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
            <input type="text" class="otp-input" name="otp4" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
            <input type="text" class="otp-input" name="otp5" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
            <input type="text" class="otp-input" name="otp6" maxlength="1" pattern="[0-9]" inputmode="numeric" required>
        </div>
      
      <button type="submit" id="verifyButton">Verify and Change Email</button>
    </form>
    
    <!-- <div class="resend">
      Didn't receive the code? <a href="#" id="resendLink">Resend code</a>
      <div id="countdown" style="display: none; margin-top: 5px; color: #7f8c8d;"></div>
    </div> -->
    
    <div id="successMessage" class="message success">
      Email address changed successfully! You will be redirected to your account in a few seconds.
    </div>
    
    <div id="errorMessage" class="message error">
      Invalid verification code. Please try again.
    </div>
  </div>
  

  <script>

  document.addEventListener('DOMContentLoaded', () => {
      const inputs = document.querySelectorAll('.otp-input');
      const verifyButton = document.getElementById('verifyButton');
      const timerElement = document.getElementById('timer');
      
      // Initialize OTP expiration timer (60 seconds)
      let timeLeft = 60;
      const otpTimer = setInterval(() => {
          timeLeft--;
          
          // Format time as MM:SS
          const minutes = Math.floor(timeLeft / 60);
          const seconds = timeLeft % 60;
          const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          
          timerElement.textContent = `Code expires in: ${formattedTime}`;
          
          // When timer expires
          if (timeLeft <= 0) {
              clearInterval(otpTimer);
              timerElement.textContent = 'Code expired';
              timerElement.style.color = '#e74c3c';
              
              // Disable inputs and button
              inputs.forEach(input => {
                  input.disabled = true;
              });
              verifyButton.disabled = true;
              
              // Show expired message
              Swal.fire({
                  icon: 'error',
                  title: 'Code Expired',
                  text: 'Your verification code has expired. Please request a new code.',
                  confirmButtonText: 'Ok'
              });
          }
          
          // Add warning color when less than 10 seconds
          if (timeLeft <= 10) {
              timerElement.style.fontWeight = 'bold';
          }
      }, 1000);
  
      // Automatically move to next box on number entry
      inputs.forEach((input, index) => {
          input.addEventListener('input', (e) => {
              const value = e.target.value;
  
              if (value && index < inputs.length - 1) {
                  inputs[index + 1].focus();
              }
          });
  
          input.addEventListener('keydown', (e) => {
              if (e.key === 'Backspace' && !input.value && index > 0) {
                  inputs[index - 1].focus();
              }
  
              if (!/^[0-9]$/.test(e.key) && e.key !== 'Backspace') {
                  e.preventDefault();
              }
          });
  
          input.addEventListener('focus', () => input.select());
      });
  
      // Handle form submission
      document.getElementById('otpForm').addEventListener('submit', function(e) {
          // Check if timer expired
          if (timeLeft <= 0) {
              e.preventDefault();
              Swal.fire({
                  icon: 'error',
                  title: 'Code Expired',
                  text: 'Your verification code has expired. Please request a new code.',
                  confirmButtonText: 'Ok'
              });
              return false;
          }
          
          let otpCode = '';
          inputs.forEach(input => otpCode += input.value);
  
          const otpHiddenInput = document.createElement('input');
          otpHiddenInput.type = 'hidden';
          otpHiddenInput.name = 'otp';
          otpHiddenInput.value = otpCode;
  
          this.appendChild(otpHiddenInput);
      });
  
      // Resend Code Logic
      let cooldown = 0;
      const countdownElement = document.getElementById('countdown');
      
      if (document.getElementById('resendLink')) {
          document.getElementById('resendLink').addEventListener('click', function(e) {
              e.preventDefault();
              
              if (cooldown > 0) return;
      
              // AJAX request for resending code
              fetch('/resend-code', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ email: document.getElementById('newEmail').textContent.trim() })
              })
              .then(response => response.json())
              .then(data => {
                  if (data.success) {
                      Swal.fire({
                          icon: 'success',
                          title: 'Code Sent!',
                          text: 'A new verification code has been sent to your email.',
                          timer: 3000,
                          showConfirmButton: false
                      }); 
                      
                      // Reset OTP timer
                      clearInterval(otpTimer);
                      timeLeft = 60;
                      
                      // Re-enable inputs and button
                      inputs.forEach(input => {
                          input.disabled = false;
                          input.value = '';
                      });
                      verifyButton.disabled = false;
                      inputs[0].focus();
                      
                      // Start new timer
                      otpTimer = setInterval(() => {
                          timeLeft--;
                          const minutes = Math.floor(timeLeft / 60);
                          const seconds = timeLeft % 60;
                          const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                          timerElement.textContent = `Code expires in: ${formattedTime}`;
                          
                          if (timeLeft <= 0) {
                              clearInterval(otpTimer);
                              timerElement.textContent = 'Code expired';
                              inputs.forEach(input => {
                                  input.disabled = true;
                              });
                              verifyButton.disabled = true;
                          }
                          
                          if (timeLeft <= 10) {
                              timerElement.style.fontWeight = 'bold';
                          }
                      }, 1000);
    
                      // Start cooldown (60 seconds)
                      cooldown = 60;
                      this.style.color = '#ccc';
                      countdownElement.style.display = 'block';
      
                      const countdownInterval = setInterval(() => {
                          countdownElement.textContent = `You can request a new code in ${cooldown} seconds`;
                          cooldown--;
      
                          if (cooldown < 0) {
                              clearInterval(countdownInterval);
                              this.style.color = '#3498db';
                              countdownElement.style.display = 'none';
                              cooldown = 0;
                          }
                      }, 1000);
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Failed to Send Code',
                          text: 'There was an issue resending the verification code. Try again later.',
                      });
                  }
              })
              .catch(err => {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'Network error occurred. Please try again later.',
                  });
              });
          });
      }
  
      const params = new URLSearchParams(window.location.search);
      const emailParam = params.get('email');
  
      if (emailParam) {
          document.getElementById('newEmail').textContent = emailParam;
      }
  });
  </script>
  
</body>
</html>